import sympy as sy
import numpy as np
from matplotlib import pyplot as plt

sym = sy.Symbol
igr = sy.integrate
simp = sy.simplify
exp = sy.expand
piecewise = sy.Piecewise
diff = sy.diff
# sy.init_printing(use_unicode=True)

# declare variables
print("declaring variables...")
x = sym("x")
y = sym("y")
z = sym("z")
xcg = sym("x_cg")
ycg = sym("y_cg")
zcg = sym("z_cg")
p = sym("p")
b_2 = sym("b/2")
L = sym("\u039B")
Lr = sym("\u039B_r")
tanL = sy.tan(Lr)
# tanL = sy.tan(L * y / b_2 + Lr)
ct = sym("c_t")
cr = sym("c_r")
tt = sym("t_t")
tr = sym("t_r")
a0 = sym("a_0")
a1 = sym("a_1")
a2 = sym("a_2")
a3 = sym("a_3")
a4 = sym("a_4")
w = sym("\u03C9")
wr = sym("\u03C9_r")
S = sy.sin( w * y / b_2 + wr)
C = sy.cos( w * y / b_2 + wr)

c = sym("c")
s = sym("s")
# Rx = sy.Matrix([[c,0,s],[0,1,0],[-s,0,c]])
# ixxm = sym("ixx")
# iyym = sym("iyy")
# izzm = sym("izz")
# ixym = sym("ixy")
# ixzm = sym("ixz")
# iyzm = sym("iyz")
# iM = sy.Matrix([[ixxm,-ixym,-ixzm],[-ixym,iyym,-iyzm],[-ixzm,-iyzm,izzm]])
# Tw = sy.factor(Rx * iM * Rx.T)
# # print(Tw)

# create bounds
print("creating bounds...")
x_up_wL = (-tanL + sy.Rational(1,4)*(ct-cr)/b_2) * y + sy.Rational(1,4)*cr - s
x_lo_wL = (-tanL - sy.Rational(3,4)*(ct-cr)/b_2) * y - sy.Rational(3,4)*cr + s
x_up =   sy.Rational(1,4)*(ct-cr)/b_2 * y + sy.Rational(1,4)*cr - s
x_lo = - sy.Rational(3,4)*(ct-cr)/b_2 * y - sy.Rational(3,4)*cr + s
ch = simp(x_up - x_lo)
t_eq = a0 * (x/ch)**0.5 + a1*(x/ch) + a2*(x/ch)**2 + a3*(x/ch)**3 +a4*(x/ch)**4
z_up =   sy.Rational(1,2) * ((tt*ct-tr*cr)/b_2 * y + tr*cr) - s # * t_eq
z_lo = - sy.Rational(1,2) * ((tt*ct-tr*cr)/b_2 * y + tr*cr) + s # * t_eq
y_up = b_2
y_lo = 0
# # remove skin thickness from x and z bounds
# x_up_wL.subs(s,0); x_lo_wL.subs(s,0)
# x_up.subs(s,0); x_lo.subs(s,0)
# z_up.subs(s,0); z_lo.subs(s,0)
x_bnd = (x,x_lo,x_up)
x_bnwL = (x,x_lo_wL,x_up_wL)
y_bnd = (y,y_lo,y_up)
z_bnd = (z,z_lo,z_up)

# create simplification constants
ka = tt*ct*(2*ct+cr) + tr*cr*(ct+2*cr)
kb = tt*ct*(3*ct+cr) + tr*cr*(ct+cr)
kc = tt*ct*(3*ct**2+2*ct*cr+cr**2) + tr*cr*(ct**2+2*ct*cr+3*cr**2)
kd = 4 *  b_2 * ( tt*ct*(12*ct+3*cr) + tr*cr*(3*ct+2*cr) )
ke = 2*tt*ct*(6*ct**2+3*ct*cr+cr**2) + tr*cr*(3*ct**2+4*ct*cr+3*cr**2)
kf = 7*tt*ct*(4*ct**3+3*ct**2*cr+2*ct*cr**2+cr**3) + \
    7*tr*cr*(ct**3+2*ct**2*cr+3*ct*cr**2+4*cr**3)
kg = tt**3*ct**3*(4*ct+cr) + tt**2*ct**2*tr*cr*(3*ct+2*cr) + \
    tt*ct*tr**2*cr**2*(2*ct+3*cr) + tr**3*cr**3*(ct+4*cr)

# expand and multiply for convention
ka = exp(ka)
kb = exp(kb)
kc = exp(kc)
kd = exp(kd)
ke = exp(ke)
kf = exp(kf)
kg = exp(kg)
subexps = [(ka,"k_a"),(kb,"k_b"),(kc,"k_c"),(kd,"k_d"),(ke,"k_e"),(kf,"k_f"),
(kg,"k_g")]

def ksubs(expr):
    for i in range(len(subexps)):
        expr = simp(simp(expr).subs(subexps[0][0],subexps[0][1]))
        # expr = simp(exp(expr).subs(subexps[0][0],subexps[0][1]))
    
    return expr

# perform integrations
print("integrating...")
# mass
print("\t mass...")
m = igr(  p,  x_bnd,z_bnd,y_bnd)
# moments
print("\t moments...")
myz = p*x
mxz = p*y
mxy = p*z
Lyz = -tanL*y
Lxz = 0
Lxy = 0
Sm = S * 1; Cm = C * 1
# Sm = Sm.subs(w,0); Cm = Cm.subs(w,0)
# myz_twist = myz # # # Cm*myz + Sm*mxy
# mxz_twist = mxz # # # mxz
# mxy_twist = mxy # # # -Sm*myz + Cm*mxy
myz_twist = Cm*myz + Sm*mxy
mxz_twist = mxz
mxy_twist = -Sm*myz + Cm*mxy
Lyz_twist = Lyz # # # Cm*Lyz + Sm*Lxy
Lxz_twist = Lxz # # # Lxz
Lxy_twist = Lxy # # # -Sm*Lyz + Cm*Lxy
# Lyz_twist = Cm*Lyz + Sm*Lxy
# Lxz_twist = Lxz
# Lxy_twist = -Sm*Lyz + Cm*Lxy
Myz = igr(myz_twist, x_bnd,z_bnd,y_bnd) + p*igr(Lyz_twist, x_bnd,z_bnd,y_bnd)
Mxz = igr(mxz_twist, x_bnd,z_bnd,y_bnd) + p*igr(Lxz_twist, x_bnd,z_bnd,y_bnd)
Mxy = igr(mxy_twist, x_bnd,z_bnd,y_bnd) + p*igr(Lxy_twist, x_bnd,z_bnd,y_bnd)
Myz_no_twist = igr(myz, x_bnd,z_bnd,y_bnd) + p*igr(Lyz, x_bnd,z_bnd,y_bnd)
Mxz_no_twist = igr(mxz, x_bnd,z_bnd,y_bnd) + p*igr(Lxz, x_bnd,z_bnd,y_bnd)
Mxy_no_twist = igr(mxy, x_bnd,z_bnd,y_bnd) + p*igr(Lxy, x_bnd,z_bnd,y_bnd)

m = sy.factor(m)
Myz = sy.factor(Myz)
Mxz = sy.factor(Mxz)
Mxy = sy.factor(Mxy)
Myz_no_twist = sy.factor(Myz_no_twist)
Mxz_no_twist = sy.factor(Mxz_no_twist)
Mxy_no_twist = sy.factor(Mxy_no_twist)
# print("Myz =", Myz, "\n")
# print("Mxz =", Mxz, "\n")
# print("Mxy =", Mxy, "\n")
# print("Myzn =", Myz_no_twist, "\n")
# print("Mxzn =", Mxz_no_twist, "\n")
# print("Mxyn =", Mxy_no_twist, "\n")


# replacement variables
print("replacing...")
b_2_val = 8.0
cr_val = 2.0
ct_val = 1.50
tr_val = tt_val = 0.12
Lr_val = np.deg2rad(15.0)
p_val = 0.0175
wr_val = np.deg2rad(2.0)
w_val = np.deg2rad(18.0)
s_val = 0.0

# organize for plugging in values and printing
names = ["all", "only mount", "no twist","no sweep"]
types = ["me","SW","PD"]
val_single = [
    [b_2,b_2_val],
    [cr,cr_val],
    [ct,ct_val],
    [tr,tr_val],
    [tt,tt_val],
    [Lr,Lr_val],
    [p,p_val],
    [w,w_val],
    [wr,wr_val],
    [s,s_val]
]
vals = [val_single] * len(names)
vals = np.array(vals)
vals[1,8,1] = np.deg2rad(20.0)
vals[1,7,1] = vals[2,7,1] = vals[2,8,1] = vals[3,5,1] = 0.0
xcgs = np.zeros((len(names),len(types)))
ycgs = np.zeros((len(names),len(types)))
zcgs = np.zeros((len(names),len(types)))
xcgs[0,1] = -1.40572654; ycgs[0,1] = 3.62162115; zcgs[0,1] = 0.07463028
xcgs[1,1] = -1.38708173; ycgs[1,1] = 3.62162162; zcgs[1,1] = 0.15165589
xcgs[2,1] = -1.41382275; ycgs[2,1] = 3.62162162; zcgs[2,1] = 0.0
xcgs[3,1] = -0.43531313; ycgs[3,1] = 3.62162081; zcgs[3,1] = 0.07465744

for i in range(len(names)):
    m_i = m.subs(vals[i])
    Myz_i = Myz.subs(vals[i])
    Mxz_i = Mxz.subs(vals[i])
    Mxy_i = Mxy.subs(vals[i])

    xcgs[i,0] = Myz_i / m_i
    ycgs[i,0] = Mxz_i / m_i
    zcgs[i,0] = Mxy_i / m_i
    
    # percent difference
    if xcgs[i,1] != 0.0:
        xcgs[i,2] = (xcgs[i,1]-xcgs[i,0]) / xcgs[i,1] * 100.0
    if ycgs[i,1] != 0.0:
        ycgs[i,2] = (ycgs[i,1]-ycgs[i,0]) / ycgs[i,1] * 100.0
    if zcgs[i,1] != 0.0:
        zcgs[i,2] = (zcgs[i,1]-zcgs[i,0]) / zcgs[i,1] * 100.0

def print_table(name,namelist,typelist,values):
    print("{:=^5s}".format(name),end="")

    widths = 17

    # print column headers
    for i in range(len(namelist)):
        print(" {:-^{}s}".format(namelist[i],widths),end="")
    print()

    # print values
    for i in range(len(typelist)):
        print("{:^5s}".format(typelist[i]),end="")
        for j in range(len(namelist)):
            print(" {:> {}.12f}".format(values[j][i],widths),end="")
        print()

    print("{: ^5s}".format(""),end="")
    for j in range(len(namelist)):
        if values[j,2] <= -1.0E-4:
            err = "-" * 5
        elif values[j,2] >=  1.0E-4:
            err = "+" * 5
        else:
            err = ""
        print(" {: ^{}s}".format(err,widths),end="")
    print()

# print("m   =",   m, "\n")
# print("Myz =", Myz, "\n")
# print("Mxz =", Mxz, "\n")
# print("Mxy =", Mxy, "\n")

print_table("xcg",names,types,xcgs)
print_table("ycg",names,types,ycgs)
print_table("zcg",names,types,zcgs)

print()


# sub inertias
print("\t sub inertias...")
ixx = igr( p*(y**2+z**2), x_bnd,z_bnd)
iyy = igr( p*(x**2+z**2), x_bnd,z_bnd)
izz = igr( p*(x**2+y**2), x_bnd,z_bnd)
ixy = igr( p*(x*y), x_bnd,z_bnd)
ixz = igr( p*(x*z), x_bnd,z_bnd)
iyz = igr( p*(y*z), x_bnd,z_bnd)
# # twisted sub inertias
# ixx_twist = ixx
# iyy_twist = iyy
# izz_twist = izz
# ixy_twist = ixy
# ixz_twist = ixz
# iyz_twist = iyz
# # make only mounting angle
# S = S.subs(w,0); C = C.subs(w,0)
# twist equations
ixx_twist = C*C*ixx - 2*C*S*ixz + S*S*izz
iyy_twist = iyy
izz_twist = S*S*ixx + 2*C*S*ixz + C*C*izz
ixy_twist = C*ixy + S*iyz # negated
ixz_twist = C*S*(ixx - izz) + ixz*(C*C - S*S) # negated
iyz_twist = C*iyz - S*ixy # negated

# # old inertias
# Ixx = (igr( p*(y**2+z**2), x_bnwL,z_bnd,y_bnd) / m - ycg**2 - zcg**2) * m
# Iyy = (igr( p*(x**2+z**2), x_bnwL,z_bnd,y_bnd) / m - xcg**2 - zcg**2) * m
# Izz = (igr( p*(x**2+y**2), x_bnwL,z_bnd,y_bnd) / m - xcg**2 - ycg**2) * m
# Ixy = (igr( p*(x*y), x_bnwL,z_bnd,y_bnd) / m - (xcg*ycg)) * m
# Ixz = (igr( p*(x*z), x_bnwL,z_bnd,y_bnd) / m - (xcg*zcg)) * m
# Iyz = (igr( p*(y*z), x_bnwL,z_bnd,y_bnd) / m - (ycg*zcg)) * m

# new inertias
print("\t full inertias...")
print("\t\t Ixx...")
Ixx_new = igr(ixx_twist,y_bnd) - m * (ycg**2 + zcg**2)
print("\t\t Iyy...")
Iyy_new = igr(iyy_twist,y_bnd) \
    - p*igr( -y**2*tanL**2 + 2*y*x*tanL, x_bnd,z_bnd,y_bnd) \
    - m * (xcg**2 + zcg**2)
print("\t\t Izz...")
Izz_new = igr(izz_twist,y_bnd) \
    - p*igr( -y**2*tanL**2 + 2*y*x*tanL, x_bnd,z_bnd,y_bnd) \
    - m * (xcg**2 + ycg**2)
print("\t\t Ixy...")
Ixy_new = igr(ixy_twist,y_bnd) - p*igr( y**2*tanL, x_bnd,z_bnd,y_bnd) \
    - m * (xcg * ycg)
print("\t\t Ixz...")
Ixz_new = igr(ixz_twist,y_bnd)  - p*igr( y*z*tanL, x_bnd,z_bnd,y_bnd) \
    - m * (xcg * zcg)
print("\t\t Iyz...")
Iyz_new = (igr(iyz_twist,y_bnd) / m - (ycg*zcg)) * m
# # differences
# Ixx_diff = simp(Ixx - Ixx_new)
# Iyy_diff = simp(Iyy - Iyy_new)
# Izz_diff = simp(Izz - Izz_new)
# Ixy_diff = simp(Ixy - Ixy_new)
# Ixz_diff = simp(Ixz - Ixz_new)
# Iyz_diff = simp(Iyz - Iyz_new)

# simplify expressions
print("simplifying...")
print("\t mass and moments...")
m = sy.factor(m)#ksubs(m))
Myz = sy.factor(Myz)
Mxz = sy.factor(Mxz)
Mxy = sy.factor(Mxy)
print("\t moments of inertia...")
Ixx_new = sy.factor(simp(sy.trigsimp(Ixx_new)))
Iyy_new = sy.factor(simp(sy.trigsimp(Iyy_new)))
Izz_new = sy.factor(simp(sy.trigsimp(Izz_new)))
print("\t products of inertia...")
Ixy_new = sy.factor(simp(sy.trigsimp(Ixy_new)))
Ixz_new = sy.factor(simp(sy.trigsimp(Ixz_new)))
Iyz_new = sy.factor(simp(sy.trigsimp(Iyz_new)))

# assign results
print("reporting...\n\n")
print("m =", m, "\n")
print("Myz =", Myz, "\n")
print("Mxz =", Mxz, "\n")
print("Mxy =", Mxy, "\n")
# print("Ixx_old =", Ixx, "\n")
# print("Iyy_old =", Iyy, "\n")
# print("Izz_old =", Izz, "\n")
# print("Ixy_old =", Ixy, "\n")
# print("Ixz_old =", Ixz, "\n")
# print("Iyz_old =", Iyz, "\n")

# print("diff =", Ixx_diff, "\n")
# print("diff =", Iyy_diff, "\n")
# print("diff =", Izz_diff, "\n")
# print("diff =", Ixy_diff, "\n")
# print("diff =", Ixz_diff, "\n")
# print("diff =", Iyz_diff, "\n")

print("Ixx_new =", Ixx_new, "\n")
print("Iyy_new =", Iyy_new, "\n")
print("Izz_new =", Izz_new, "\n")
print("Ixy_new =", Ixy_new, "\n")
print("Ixz_new =", Ixz_new, "\n")
print("Iyz_new =", Iyz_new, "\n")


# replacement variables
Ixxs = np.zeros((len(names),len(types)))
Iyys = np.zeros((len(names),len(types)))
Izzs = np.zeros((len(names),len(types)))
Ixys = np.zeros((len(names),len(types)))
Ixzs = np.zeros((len(names),len(types)))
Iyzs = np.zeros((len(names),len(types)))
Ixxs[0,1] =  0.27104439671784700; Iyys[0,1] =  0.03075003481071670
Izzs[0,1] =  0.30039189780568200; Ixys[0,1] = -0.06745635886119230
Ixzs[0,1] = -0.00306973581152483; Iyzs[0,1] =  0.00380336762603344
Ixxs[1,1] =  0.27212442282588400; Iyys[1,1] =  0.03121298066761980
Izzs[1,1] =  0.29977679119786200; Ixys[1,1] = -0.06846910704295400
Ixzs[1,1] = -0.00396349754460123; Iyzs[1,1] = -0.00144473643314478
Ixxs[2,1] =  0.27054092901100300; Iyys[2,1] =  0.03107646267172250
Izzs[2,1] =  0.30122376701684600; Ixys[2,1] = -0.06821436097470010
Ixzs[2,1] =  0.00000000000000000; Iyzs[2,1] =  0.00000000000000000
Ixxs[3,1] =  0.27104434077205200; Iyys[3,1] =  0.01401005843227450
Izzs[3,1] =  0.28365186610306500; Ixys[3,1] =  0.00498199695406229
Ixzs[3,1] = -0.00205063436315037; Iyzs[3,1] =  0.00380316062659290

for i in range(len(names)):
    Ixxs[i,0] = Ixx_new.subs(vals[i]).subs(xcg,xcgs[i,0]).subs(ycg,\
        ycgs[i,0]).subs(zcg,zcgs[i,0])
    Iyys[i,0] = Iyy_new.subs(vals[i]).subs(xcg,xcgs[i,0]).subs(ycg,\
        ycgs[i,0]).subs(zcg,zcgs[i,0])
    Izzs[i,0] = Izz_new.subs(vals[i]).subs(xcg,xcgs[i,0]).subs(ycg,\
        ycgs[i,0]).subs(zcg,zcgs[i,0])
    Ixys[i,0] = Ixy_new.subs(vals[i]).subs(xcg,xcgs[i,0]).subs(ycg,\
        ycgs[i,0]).subs(zcg,zcgs[i,0])
    Ixzs[i,0] = Ixz_new.subs(vals[i]).subs(xcg,xcgs[i,0]).subs(ycg,\
        ycgs[i,0]).subs(zcg,zcgs[i,0])
    Iyzs[i,0] = Iyz_new.subs(vals[i]).subs(xcg,xcgs[i,0]).subs(ycg,\
        ycgs[i,0]).subs(zcg,zcgs[i,0])
    
    # percent difference
    if Ixxs[i,1] != 0.0:
        Ixxs[i,2] = (Ixxs[i,1]-Ixxs[i,0]) / Ixxs[i,1] * 100.0
    if Iyys[i,1] != 0.0:
        Iyys[i,2] = (Iyys[i,1]-Iyys[i,0]) / Iyys[i,1] * 100.0
    if Izzs[i,1] != 0.0:
        Izzs[i,2] = (Izzs[i,1]-Izzs[i,0]) / Izzs[i,1] * 100.0
    if Ixys[i,1] != 0.0:
        Ixys[i,2] = (Ixys[i,1]-Ixys[i,0]) / Ixys[i,1] * 100.0
    if Ixzs[i,1] != 0.0:
        Ixzs[i,2] = (Ixzs[i,1]-Ixzs[i,0]) / Ixzs[i,1] * 100.0
    if Iyzs[i,1] != 0.0:
        Iyzs[i,2] = (Iyzs[i,1]-Iyzs[i,0]) / Iyzs[i,1] * 100.0

print_table("Ixx",names,types,Ixxs)
print_table("Iyy",names,types,Iyys)
print_table("Izz",names,types,Izzs)
print_table("Ixy",names,types,Ixys)
print_table("Ixz",names,types,Ixzs)
print_table("Iyz",names,types,Iyzs)

# write out to text file as well as latex version
# print(sy.latex(Ixx_new.subs(w,sym("\\omega")).subs(L,sym("\\Lambda"))))




# # sympy
# replacement variables
# b_2 = 8.0
# cr = 2.0
# ct = 1.50
# tr = tt = 0.12
# Lr = 15.0
# p = 0.0175
# tanL = sy.tan(np.deg2rad(Lr))
# wr = np.deg2rad(2.0)
# w = np.deg2rad(18.0)
# xcg = -1.38708173
# ycg = 3.62162162
# zcg = 0.15165589

# Ixx_cpy = sy.Piecewise((b_2*p*(-1280*cr**2*tr*ycg**2 - 1280*cr**2*tr*zcg**2 - 640*cr*ct*tr*ycg**2 - 640*cr*ct*tr*zcg**2 - 640*cr*ct*tt*ycg**2 - 640*cr*ct*tt*zcg**2 - 1280*ct**2*tt*ycg**2 - 1280*ct**2*tt*zcg**2 + (-120*cr**4*tr**3*sy.sin(2*wr) + 120*cr**4*tr**3*sy.sin(2*w + 2*wr) + 210*cr**4*tr*sy.sin(2*wr) - 210*cr**4*tr*sy.sin(2*w + 2*wr) + 120*cr**3*ct*tr**3*sy.sin(2*wr) - 120*cr**3*ct*tr**3*sy.sin(2*w + 2*wr) + 360*cr**3*ct*tr**2*tt*sy.sin(2*wr) - 360*cr**3*ct*tr**2*tt*sy.sin(2*w + 2*wr) - 630*cr**3*ct*tr*sy.sin(2*wr) + 630*cr**3*ct*tr*sy.sin(2*w + 2*wr) - 210*cr**3*ct*tt*sy.sin(2*wr) + 210*cr**3*ct*tt*sy.sin(2*w + 2*wr) - 360*cr**2*ct**2*tr**2*tt*sy.sin(2*wr) + 360*cr**2*ct**2*tr**2*tt*sy.sin(2*w + 2*wr) - 360*cr**2*ct**2*tr*tt**2*sy.sin(2*wr) + 360*cr**2*ct**2*tr*tt**2*sy.sin(2*w + 2*wr) + 630*cr**2*ct**2*tr*sy.sin(2*wr) - 630*cr**2*ct**2*tr*sy.sin(2*w + 2*wr) + 630*cr**2*ct**2*tt*sy.sin(2*wr) - 630*cr**2*ct**2*tt*sy.sin(2*w + 2*wr) + 360*cr*ct**3*tr*tt**2*sy.sin(2*wr) - 360*cr*ct**3*tr*tt**2*sy.sin(2*w + 2*wr) - 210*cr*ct**3*tr*sy.sin(2*wr) + 210*cr*ct**3*tr*sy.sin(2*w + 2*wr) + 120*cr*ct**3*tt**3*sy.sin(2*wr) - 120*cr*ct**3*tt**3*sy.sin(2*w + 2*wr) - 630*cr*ct**3*tt*sy.sin(2*wr) + 630*cr*ct**3*tt*sy.sin(2*w + 2*wr) - 120*ct**4*tt**3*sy.sin(2*wr) + 120*ct**4*tt**3*sy.sin(2*w + 2*wr) + 210*ct**4*tt*sy.sin(2*wr) - 210*ct**4*tt*sy.sin(2*w + 2*wr) + 2*w**5*(64*b_2**2*cr**2*tr + 96*b_2**2*cr*ct*tr + 96*b_2**2*cr*ct*tt + 384*b_2**2*ct**2*tt + 16*cr**4*tr**3 + 28*cr**4*tr + 4*cr**3*ct*tr**3 + 12*cr**3*ct*tr**2*tt + 21*cr**3*ct*tr + 7*cr**3*ct*tt + 8*cr**2*ct**2*tr**2*tt + 8*cr**2*ct**2*tr*tt**2 + 14*cr**2*ct**2*tr + 14*cr**2*ct**2*tt + 12*cr*ct**3*tr*tt**2 + 7*cr*ct**3*tr + 4*cr*ct**3*tt**3 + 21*cr*ct**3*tt + 16*ct**4*tt**3 + 28*ct**4*tt) + 20*w**4*(-4*cr**4*tr**3*sy.sin(2*wr) + 7*cr**4*tr*sy.sin(2*wr) + 4*ct**4*tt**3*sy.sin(2*w + 2*wr) - 7*ct**4*tt*sy.sin(2*w + 2*wr)) + 10*w**3*(16*cr**4*tr**3*sy.cos(2*wr) - 28*cr**4*tr*sy.cos(2*wr) - 4*cr**3*ct*tr**3*sy.cos(2*wr) - 12*cr**3*ct*tr**2*tt*sy.cos(2*wr) + 21*cr**3*ct*tr*sy.cos(2*wr) + 7*cr**3*ct*tt*sy.cos(2*wr) - 12*cr*ct**3*tr*tt**2*sy.cos(2*w + 2*wr) + 7*cr*ct**3*tr*sy.cos(2*w + 2*wr) - 4*cr*ct**3*tt**3*sy.cos(2*w + 2*wr) + 21*cr*ct**3*tt*sy.cos(2*w + 2*wr) + 16*ct**4*tt**3*sy.cos(2*w + 2*wr) - 28*ct**4*tt*sy.cos(2*w + 2*wr)) + 30*w**2*(8*cr**4*tr**3*sy.sin(2*wr) - 14*cr**4*tr*sy.sin(2*wr) - 4*cr**3*ct*tr**3*sy.sin(2*wr) - 12*cr**3*ct*tr**2*tt*sy.sin(2*wr) + 21*cr**3*ct*tr*sy.sin(2*wr) + 7*cr**3*ct*tt*sy.sin(2*wr) + 4*cr**2*ct**2*tr**2*tt*sy.sin(2*wr) - 4*cr**2*ct**2*tr**2*tt*sy.sin(2*w + 2*wr) + 4*cr**2*ct**2*tr*tt**2*sy.sin(2*wr) - 4*cr**2*ct**2*tr*tt**2*sy.sin(2*w + 2*wr) - 7*cr**2*ct**2*tr*sy.sin(2*wr) + 7*cr**2*ct**2*tr*sy.sin(2*w + 2*wr) - 7*cr**2*ct**2*tt*sy.sin(2*wr) + 7*cr**2*ct**2*tt*sy.sin(2*w + 2*wr) + 12*cr*ct**3*tr*tt**2*sy.sin(2*w + 2*wr) - 7*cr*ct**3*tr*sy.sin(2*w + 2*wr) + 4*cr*ct**3*tt**3*sy.sin(2*w + 2*wr) - 21*cr*ct**3*tt*sy.sin(2*w + 2*wr) - 8*ct**4*tt**3*sy.sin(2*w + 2*wr) + 14*ct**4*tt*sy.sin(2*w + 2*wr)) + 15*w*(-16*cr**4*tr**3*sy.cos(2*wr) + 28*cr**4*tr*sy.cos(2*wr) + 12*cr**3*ct*tr**3*sy.cos(2*wr) + 4*cr**3*ct*tr**3*sy.cos(2*w + 2*wr) + 36*cr**3*ct*tr**2*tt*sy.cos(2*wr) + 12*cr**3*ct*tr**2*tt*sy.cos(2*w + 2*wr) - 63*cr**3*ct*tr*sy.cos(2*wr) - 21*cr**3*ct*tr*sy.cos(2*w + 2*wr) - 21*cr**3*ct*tt*sy.cos(2*wr) - 7*cr**3*ct*tt*sy.cos(2*w + 2*wr) - 24*cr**2*ct**2*tr**2*tt*sy.cos(2*wr) - 24*cr**2*ct**2*tr**2*tt*sy.cos(2*w + 2*wr) - 24*cr**2*ct**2*tr*tt**2*sy.cos(2*wr) - 24*cr**2*ct**2*tr*tt**2*sy.cos(2*w + 2*wr) + 42*cr**2*ct**2*tr*sy.cos(2*wr) + 42*cr**2*ct**2*tr*sy.cos(2*w + 2*wr) + 42*cr**2*ct**2*tt*sy.cos(2*wr) + 42*cr**2*ct**2*tt*sy.cos(2*w + 2*wr) + 12*cr*ct**3*tr*tt**2*sy.cos(2*wr) + 36*cr*ct**3*tr*tt**2*sy.cos(2*w + 2*wr) - 7*cr*ct**3*tr*sy.cos(2*wr) - 21*cr*ct**3*tr*sy.cos(2*w + 2*wr) + 4*cr*ct**3*tt**3*sy.cos(2*wr) + 12*cr*ct**3*tt**3*sy.cos(2*w + 2*wr) - 21*cr*ct**3*tt*sy.cos(2*wr) - 63*cr*ct**3*tt*sy.cos(2*w + 2*wr) - 16*ct**4*tt**3*sy.cos(2*w + 2*wr) + 28*ct**4*tt*sy.cos(2*w + 2*wr)))/w**5)/3840, (w > -sy.oo) & (w < sy.oo) & (w != 0)), (b_2*p*(32*b_2**2*cr**2*tr + 48*b_2**2*cr*ct*tr + 48*b_2**2*cr*ct*tt + 192*b_2**2*ct**2*tt + 16*cr**4*tr**3*sy.cos(wr)**2 - 28*cr**4*tr*sy.cos(wr)**2 + 28*cr**4*tr + 4*cr**3*ct*tr**3*sy.cos(wr)**2 + 12*cr**3*ct*tr**2*tt*sy.cos(wr)**2 - 21*cr**3*ct*tr*sy.cos(wr)**2 + 21*cr**3*ct*tr - 7*cr**3*ct*tt*sy.cos(wr)**2 + 7*cr**3*ct*tt + 8*cr**2*ct**2*tr**2*tt*sy.cos(wr)**2 + 8*cr**2*ct**2*tr*tt**2*sy.cos(wr)**2 - 14*cr**2*ct**2*tr*sy.cos(wr)**2 + 14*cr**2*ct**2*tr - 14*cr**2*ct**2*tt*sy.cos(wr)**2 + 14*cr**2*ct**2*tt - 320*cr**2*tr*ycg**2 - 320*cr**2*tr*zcg**2 + 12*cr*ct**3*tr*tt**2*sy.cos(wr)**2 - 7*cr*ct**3*tr*sy.cos(wr)**2 + 7*cr*ct**3*tr + 4*cr*ct**3*tt**3*sy.cos(wr)**2 - 21*cr*ct**3*tt*sy.cos(wr)**2 + 21*cr*ct**3*tt - 160*cr*ct*tr*ycg**2 - 160*cr*ct*tr*zcg**2 - 160*cr*ct*tt*ycg**2 - 160*cr*ct*tt*zcg**2 + 16*ct**4*tt**3*sy.cos(wr)**2 - 28*ct**4*tt*sy.cos(wr)**2 + 28*ct**4*tt - 320*ct**2*tt*ycg**2 - 320*ct**2*tt*zcg**2)/960, True))
# Iyy_cpy = b_2*p*(32*b_2**2*cr**2*tr*tanL**2 + 48*b_2**2*cr*ct*tr*tanL**2 + 48*b_2**2*cr*ct*tt*tanL**2 + 192*b_2**2*ct**2*tt*tanL**2 + 24*b_2*cr**3*tr*tanL + 32*b_2*cr**2*ct*tr*tanL + 16*b_2*cr**2*ct*tt*tanL + 24*b_2*cr*ct**2*tr*tanL + 48*b_2*cr*ct**2*tt*tanL + 96*b_2*ct**3*tt*tanL + 16*cr**4*tr**3 + 28*cr**4*tr + 4*cr**3*ct*tr**3 + 12*cr**3*ct*tr**2*tt + 21*cr**3*ct*tr + 7*cr**3*ct*tt + 8*cr**2*ct**2*tr**2*tt + 8*cr**2*ct**2*tr*tt**2 + 14*cr**2*ct**2*tr + 14*cr**2*ct**2*tt - 320*cr**2*tr*xcg**2 - 320*cr**2*tr*zcg**2 + 12*cr*ct**3*tr*tt**2 + 7*cr*ct**3*tr + 4*cr*ct**3*tt**3 + 21*cr*ct**3*tt - 160*cr*ct*tr*xcg**2 - 160*cr*ct*tr*zcg**2 - 160*cr*ct*tt*xcg**2 - 160*cr*ct*tt*zcg**2 + 16*ct**4*tt**3 + 28*ct**4*tt - 320*ct**2*tt*xcg**2 - 320*ct**2*tt*zcg**2)/960 
# Izz_cpy = sy.Piecewise((b_2*p*(128*b_2**2*cr**2*tr*tanL**2 + 192*b_2**2*cr*ct*tr*tanL**2 + 192*b_2**2*cr*ct*tt*tanL**2 + 768*b_2**2*ct**2*tt*tanL**2 + 96*b_2*cr**3*tr*tanL + 128*b_2*cr**2*ct*tr*tanL + 64*b_2*cr**2*ct*tt*tanL + 96*b_2*cr*ct**2*tr*tanL + 192*b_2*cr*ct**2*tt*tanL + 384*b_2*ct**3*tt*tanL - 1280*cr**2*tr*xcg**2 - 1280*cr**2*tr*ycg**2 - 640*cr*ct*tr*xcg**2 - 640*cr*ct*tr*ycg**2 - 640*cr*ct*tt*xcg**2 - 640*cr*ct*tt*ycg**2 - 1280*ct**2*tt*xcg**2 - 1280*ct**2*tt*ycg**2 + (120*cr**4*tr**3*sy.sin(2*wr) - 120*cr**4*tr**3*sy.sin(2*w + 2*wr) - 210*cr**4*tr*sy.sin(2*wr) + 210*cr**4*tr*sy.sin(2*w + 2*wr) - 120*cr**3*ct*tr**3*sy.sin(2*wr) + 120*cr**3*ct*tr**3*sy.sin(2*w + 2*wr) - 360*cr**3*ct*tr**2*tt*sy.sin(2*wr) + 360*cr**3*ct*tr**2*tt*sy.sin(2*w + 2*wr) + 630*cr**3*ct*tr*sy.sin(2*wr) - 630*cr**3*ct*tr*sy.sin(2*w + 2*wr) + 210*cr**3*ct*tt*sy.sin(2*wr) - 210*cr**3*ct*tt*sy.sin(2*w + 2*wr) + 360*cr**2*ct**2*tr**2*tt*sy.sin(2*wr) - 360*cr**2*ct**2*tr**2*tt*sy.sin(2*w + 2*wr) + 360*cr**2*ct**2*tr*tt**2*sy.sin(2*wr) - 360*cr**2*ct**2*tr*tt**2*sy.sin(2*w + 2*wr) - 630*cr**2*ct**2*tr*sy.sin(2*wr) + 630*cr**2*ct**2*tr*sy.sin(2*w + 2*wr) - 630*cr**2*ct**2*tt*sy.sin(2*wr) + 630*cr**2*ct**2*tt*sy.sin(2*w + 2*wr) - 360*cr*ct**3*tr*tt**2*sy.sin(2*wr) + 360*cr*ct**3*tr*tt**2*sy.sin(2*w + 2*wr) + 210*cr*ct**3*tr*sy.sin(2*wr) - 210*cr*ct**3*tr*sy.sin(2*w + 2*wr) - 120*cr*ct**3*tt**3*sy.sin(2*wr) + 120*cr*ct**3*tt**3*sy.sin(2*w + 2*wr) + 630*cr*ct**3*tt*sy.sin(2*wr) - 630*cr*ct**3*tt*sy.sin(2*w + 2*wr) + 120*ct**4*tt**3*sy.sin(2*wr) - 120*ct**4*tt**3*sy.sin(2*w + 2*wr) - 210*ct**4*tt*sy.sin(2*wr) + 210*ct**4*tt*sy.sin(2*w + 2*wr) + 2*w**5*(64*b_2**2*cr**2*tr + 96*b_2**2*cr*ct*tr + 96*b_2**2*cr*ct*tt + 384*b_2**2*ct**2*tt + 16*cr**4*tr**3 + 28*cr**4*tr + 4*cr**3*ct*tr**3 + 12*cr**3*ct*tr**2*tt + 21*cr**3*ct*tr + 7*cr**3*ct*tt + 8*cr**2*ct**2*tr**2*tt + 8*cr**2*ct**2*tr*tt**2 + 14*cr**2*ct**2*tr + 14*cr**2*ct**2*tt + 12*cr*ct**3*tr*tt**2 + 7*cr*ct**3*tr + 4*cr*ct**3*tt**3 + 21*cr*ct**3*tt + 16*ct**4*tt**3 + 28*ct**4*tt) + 20*w**4*(4*cr**4*tr**3*sy.sin(2*wr) - 7*cr**4*tr*sy.sin(2*wr) - 4*ct**4*tt**3*sy.sin(2*w + 2*wr) + 7*ct**4*tt*sy.sin(2*w + 2*wr)) + 10*w**3*(-16*cr**4*tr**3*sy.cos(2*wr) + 28*cr**4*tr*sy.cos(2*wr) + 4*cr**3*ct*tr**3*sy.cos(2*wr) + 12*cr**3*ct*tr**2*tt*sy.cos(2*wr) - 21*cr**3*ct*tr*sy.cos(2*wr) - 7*cr**3*ct*tt*sy.cos(2*wr) + 12*cr*ct**3*tr*tt**2*sy.cos(2*w + 2*wr) - 7*cr*ct**3*tr*sy.cos(2*w + 2*wr) + 4*cr*ct**3*tt**3*sy.cos(2*w + 2*wr) - 21*cr*ct**3*tt*sy.cos(2*w + 2*wr) - 16*ct**4*tt**3*sy.cos(2*w + 2*wr) + 28*ct**4*tt*sy.cos(2*w + 2*wr)) + 30*w**2*(-8*cr**4*tr**3*sy.sin(2*wr) + 14*cr**4*tr*sy.sin(2*wr) + 4*cr**3*ct*tr**3*sy.sin(2*wr) + 12*cr**3*ct*tr**2*tt*sy.sin(2*wr) - 21*cr**3*ct*tr*sy.sin(2*wr) - 7*cr**3*ct*tt*sy.sin(2*wr) - 4*cr**2*ct**2*tr**2*tt*sy.sin(2*wr) + 4*cr**2*ct**2*tr**2*tt*sy.sin(2*w + 2*wr) - 4*cr**2*ct**2*tr*tt**2*sy.sin(2*wr) + 4*cr**2*ct**2*tr*tt**2*sy.sin(2*w + 2*wr) + 7*cr**2*ct**2*tr*sy.sin(2*wr) - 7*cr**2*ct**2*tr*sy.sin(2*w + 2*wr) + 7*cr**2*ct**2*tt*sy.sin(2*wr) - 7*cr**2*ct**2*tt*sy.sin(2*w + 2*wr) - 12*cr*ct**3*tr*tt**2*sy.sin(2*w + 2*wr) + 7*cr*ct**3*tr*sy.sin(2*w + 2*wr) - 4*cr*ct**3*tt**3*sy.sin(2*w + 2*wr) + 21*cr*ct**3*tt*sy.sin(2*w + 2*wr) + 8*ct**4*tt**3*sy.sin(2*w + 2*wr) - 14*ct**4*tt*sy.sin(2*w + 2*wr)) + 15*w*(16*cr**4*tr**3*sy.cos(2*wr) - 28*cr**4*tr*sy.cos(2*wr) - 12*cr**3*ct*tr**3*sy.cos(2*wr) - 4*cr**3*ct*tr**3*sy.cos(2*w + 2*wr) - 36*cr**3*ct*tr**2*tt*sy.cos(2*wr) - 12*cr**3*ct*tr**2*tt*sy.cos(2*w + 2*wr) + 63*cr**3*ct*tr*sy.cos(2*wr) + 21*cr**3*ct*tr*sy.cos(2*w + 2*wr) + 21*cr**3*ct*tt*sy.cos(2*wr) + 7*cr**3*ct*tt*sy.cos(2*w + 2*wr) + 24*cr**2*ct**2*tr**2*tt*sy.cos(2*wr) + 24*cr**2*ct**2*tr**2*tt*sy.cos(2*w + 2*wr) + 24*cr**2*ct**2*tr*tt**2*sy.cos(2*wr) + 24*cr**2*ct**2*tr*tt**2*sy.cos(2*w + 2*wr) - 42*cr**2*ct**2*tr*sy.cos(2*wr) - 42*cr**2*ct**2*tr*sy.cos(2*w + 2*wr) - 42*cr**2*ct**2*tt*sy.cos(2*wr) - 42*cr**2*ct**2*tt*sy.cos(2*w + 2*wr) - 12*cr*ct**3*tr*tt**2*sy.cos(2*wr) - 36*cr*ct**3*tr*tt**2*sy.cos(2*w + 2*wr) + 7*cr*ct**3*tr*sy.cos(2*wr) + 21*cr*ct**3*tr*sy.cos(2*w + 2*wr) - 4*cr*ct**3*tt**3*sy.cos(2*wr) - 12*cr*ct**3*tt**3*sy.cos(2*w + 2*wr) + 21*cr*ct**3*tt*sy.cos(2*wr) + 63*cr*ct**3*tt*sy.cos(2*w + 2*wr) + 16*ct**4*tt**3*sy.cos(2*w + 2*wr) - 28*ct**4*tt*sy.cos(2*w + 2*wr)))/w**5)/3840, (w > -sy.oo) & (w < sy.oo) & (w != 0)), (b_2*p*(32*b_2**2*cr**2*tr/sy.cos(Lr)**2 + 48*b_2**2*cr*ct*tr/sy.cos(Lr)**2 + 48*b_2**2*cr*ct*tt/sy.cos(Lr)**2 + 192*b_2**2*ct**2*tt/sy.cos(Lr)**2 + 24*b_2*cr**3*tr*tanL + 32*b_2*cr**2*ct*tr*tanL + 16*b_2*cr**2*ct*tt*tanL + 24*b_2*cr*ct**2*tr*tanL + 48*b_2*cr*ct**2*tt*tanL + 96*b_2*ct**3*tt*tanL + 16*cr**4*tr**3*sy.sin(wr)**2 - 28*cr**4*tr*sy.sin(wr)**2 + 28*cr**4*tr + 4*cr**3*ct*tr**3*sy.sin(wr)**2 + 12*cr**3*ct*tr**2*tt*sy.sin(wr)**2 - 21*cr**3*ct*tr*sy.sin(wr)**2 + 21*cr**3*ct*tr - 7*cr**3*ct*tt*sy.sin(wr)**2 + 7*cr**3*ct*tt + 8*cr**2*ct**2*tr**2*tt*sy.sin(wr)**2 + 8*cr**2*ct**2*tr*tt**2*sy.sin(wr)**2 - 14*cr**2*ct**2*tr*sy.sin(wr)**2 + 14*cr**2*ct**2*tr - 14*cr**2*ct**2*tt*sy.sin(wr)**2 + 14*cr**2*ct**2*tt - 320*cr**2*tr*xcg**2 - 320*cr**2*tr*ycg**2 + 12*cr*ct**3*tr*tt**2*sy.sin(wr)**2 - 7*cr*ct**3*tr*sy.sin(wr)**2 + 7*cr*ct**3*tr + 4*cr*ct**3*tt**3*sy.sin(wr)**2 - 21*cr*ct**3*tt*sy.sin(wr)**2 + 21*cr*ct**3*tt - 160*cr*ct*tr*xcg**2 - 160*cr*ct*tr*ycg**2 - 160*cr*ct*tt*xcg**2 - 160*cr*ct*tt*ycg**2 + 16*ct**4*tt**3*sy.sin(wr)**2 - 28*ct**4*tt*sy.sin(wr)**2 + 28*ct**4*tt - 320*ct**2*tt*xcg**2 - 320*ct**2*tt*ycg**2)/960, True)) 
# Ixy_cpy = sy.Piecewise((b_2*p*(-2*b_2**2*cr**2*tr*tanL - 3*b_2**2*cr*ct*tr*tanL - 3*b_2**2*cr*ct*tt*tanL - 12*b_2**2*ct**2*tt*tanL + 15*b_2*(-24*cr**3*tr*sy.sin(wr) + 24*cr**3*tr*sy.sin(w + wr) + 48*cr**2*ct*tr*sy.sin(wr) - 48*cr**2*ct*tr*sy.sin(w + wr) + 24*cr**2*ct*tt*sy.sin(wr) - 24*cr**2*ct*tt*sy.sin(w + wr) - 24*cr*ct**2*tr*sy.sin(wr) + 24*cr*ct**2*tr*sy.sin(w + wr) - 48*cr*ct**2*tt*sy.sin(wr) + 48*cr*ct**2*tt*sy.sin(w + wr) - ct**3*tt*w**4*sy.sin(w + wr) + 24*ct**3*tt*sy.sin(wr) - 24*ct**3*tt*sy.sin(w + wr) + w**3*(cr**3*tr*sy.cos(wr) + cr*ct**2*tr*sy.cos(w + wr) + 2*cr*ct**2*tt*sy.cos(w + wr) - 4*ct**3*tt*sy.cos(w + wr)) + 2*w**2*(3*cr**3*tr*sy.sin(wr) - 2*cr**2*ct*tr*sy.sin(wr) + 2*cr**2*ct*tr*sy.sin(w + wr) - cr**2*ct*tt*sy.sin(wr) + cr**2*ct*tt*sy.sin(w + wr) - 3*cr*ct**2*tr*sy.sin(w + wr) - 6*cr*ct**2*tt*sy.sin(w + wr) + 6*ct**3*tt*sy.sin(w + wr)) + 6*w*(-3*cr**3*tr*sy.cos(wr) - cr**3*tr*sy.cos(w + wr) + 4*cr**2*ct*tr*sy.cos(wr) + 4*cr**2*ct*tr*sy.cos(w + wr) + 2*cr**2*ct*tt*sy.cos(wr) + 2*cr**2*ct*tt*sy.cos(w + wr) - cr*ct**2*tr*sy.cos(wr) - 3*cr*ct**2*tr*sy.cos(w + wr) - 2*cr*ct**2*tt*sy.cos(wr) - 6*cr*ct**2*tt*sy.cos(w + wr) + 4*ct**3*tt*sy.cos(w + wr)))/w**5 - 20*cr**2*tr*xcg*ycg - 10*cr*ct*tr*xcg*ycg - 10*cr*ct*tt*xcg*ycg - 20*ct**2*tt*xcg*ycg)/60, (w > -sy.oo) & (w < sy.oo) & (w != 0)), (-b_2*p*(8*b_2**2*cr**2*tr*tanL + 12*b_2**2*cr*ct*tr*tanL + 12*b_2**2*cr*ct*tt*tanL + 48*b_2**2*ct**2*tt*tanL + b_2*(3*cr**3*tr + 4*cr**2*ct*tr + 2*cr**2*ct*tt + 3*cr*ct**2*tr + 6*cr*ct**2*tt + 12*ct**3*tt)*sy.cos(wr) + 80*cr**2*tr*xcg*ycg + 40*cr*ct*tr*xcg*ycg + 40*cr*ct*tt*xcg*ycg + 80*ct**2*tt*xcg*ycg)/240, True)) 
# Ixz_cpy = sy.Piecewise((b_2*p*(-256*cr**2*tr*xcg*zcg - 128*cr*ct*tr*xcg*zcg - 128*cr*ct*tt*xcg*zcg - 256*ct**2*tt*xcg*zcg + (48*cr**4*tr**3*sy.sin(wr)**2 - 48*cr**4*tr**3*sy.sin(w + wr)**2 - 84*cr**4*tr*sy.sin(wr)**2 + 84*cr**4*tr*sy.sin(w + wr)**2 - 48*cr**3*ct*tr**3*sy.sin(wr)**2 + 48*cr**3*ct*tr**3*sy.sin(w + wr)**2 - 144*cr**3*ct*tr**2*tt*sy.sin(wr)**2 + 144*cr**3*ct*tr**2*tt*sy.sin(w + wr)**2 + 252*cr**3*ct*tr*sy.sin(wr)**2 - 252*cr**3*ct*tr*sy.sin(w + wr)**2 + 84*cr**3*ct*tt*sy.sin(wr)**2 - 84*cr**3*ct*tt*sy.sin(w + wr)**2 + 144*cr**2*ct**2*tr**2*tt*sy.sin(wr)**2 - 144*cr**2*ct**2*tr**2*tt*sy.sin(w + wr)**2 + 144*cr**2*ct**2*tr*tt**2*sy.sin(wr)**2 - 144*cr**2*ct**2*tr*tt**2*sy.sin(w + wr)**2 - 252*cr**2*ct**2*tr*sy.sin(wr)**2 + 252*cr**2*ct**2*tr*sy.sin(w + wr)**2 - 252*cr**2*ct**2*tt*sy.sin(wr)**2 + 252*cr**2*ct**2*tt*sy.sin(w + wr)**2 - 144*cr*ct**3*tr*tt**2*sy.sin(wr)**2 + 144*cr*ct**3*tr*tt**2*sy.sin(w + wr)**2 + 84*cr*ct**3*tr*sy.sin(wr)**2 - 84*cr*ct**3*tr*sy.sin(w + wr)**2 - 48*cr*ct**3*tt**3*sy.sin(wr)**2 + 48*cr*ct**3*tt**3*sy.sin(w + wr)**2 + 252*cr*ct**3*tt*sy.sin(wr)**2 - 252*cr*ct**3*tt*sy.sin(w + wr)**2 + 48*ct**4*tt**3*sy.sin(wr)**2 - 48*ct**4*tt**3*sy.sin(w + wr)**2 - 84*ct**4*tt*sy.sin(wr)**2 + 84*ct**4*tt*sy.sin(w + wr)**2 + 4*w**4*(8*cr**4*tr**3*sy.sin(wr)**2 - 4*cr**4*tr**3*sy.sin(w + wr)**2 - 4*cr**4*tr**3*sy.cos(w + wr)**2 - 14*cr**4*tr*sy.sin(wr)**2 + 7*cr**4*tr*sy.sin(w + wr)**2 + 7*cr**4*tr*sy.cos(w + wr)**2 - 4*ct**4*tt**3*sy.sin(w + wr)**2 + 4*ct**4*tt**3*sy.cos(w + wr)**2 + 7*ct**4*tt*sy.sin(w + wr)**2 - 7*ct**4*tt*sy.cos(w + wr)**2) + 2*w**3*(-16*cr**4*tr**3*sy.sin(2*wr) + 28*cr**4*tr*sy.sin(2*wr) + 4*cr**3*ct*tr**3*sy.sin(2*wr) + 12*cr**3*ct*tr**2*tt*sy.sin(2*wr) - 21*cr**3*ct*tr*sy.sin(2*wr) - 7*cr**3*ct*tt*sy.sin(2*wr) + 12*cr*ct**3*tr*tt**2*sy.sin(2*w + 2*wr) - 7*cr*ct**3*tr*sy.sin(2*w + 2*wr) + 4*cr*ct**3*tt**3*sy.sin(2*w + 2*wr) - 21*cr*ct**3*tt*sy.sin(2*w + 2*wr) - 16*ct**4*tt**3*sy.sin(2*w + 2*wr) + 28*ct**4*tt*sy.sin(2*w + 2*wr)) + 6*w**2*(-16*cr**4*tr**3*sy.sin(wr)**2 + 8*cr**4*tr**3*sy.sin(w + wr)**2 + 8*cr**4*tr**3*sy.cos(w + wr)**2 + 28*cr**4*tr*sy.sin(wr)**2 - 14*cr**4*tr*sy.sin(w + wr)**2 - 14*cr**4*tr*sy.cos(w + wr)**2 + 8*cr**3*ct*tr**3*sy.sin(wr)**2 - 4*cr**3*ct*tr**3*sy.sin(w + wr)**2 - 4*cr**3*ct*tr**3*sy.cos(w + wr)**2 + 24*cr**3*ct*tr**2*tt*sy.sin(wr)**2 - 12*cr**3*ct*tr**2*tt*sy.sin(w + wr)**2 - 12*cr**3*ct*tr**2*tt*sy.cos(w + wr)**2 - 42*cr**3*ct*tr*sy.sin(wr)**2 + 21*cr**3*ct*tr*sy.sin(w + wr)**2 + 21*cr**3*ct*tr*sy.cos(w + wr)**2 - 14*cr**3*ct*tt*sy.sin(wr)**2 + 7*cr**3*ct*tt*sy.sin(w + wr)**2 + 7*cr**3*ct*tt*sy.cos(w + wr)**2 - 8*cr**2*ct**2*tr**2*tt*sy.sin(wr)**2 + 8*cr**2*ct**2*tr**2*tt*sy.sin(w + wr)**2 - 8*cr**2*ct**2*tr*tt**2*sy.sin(wr)**2 + 8*cr**2*ct**2*tr*tt**2*sy.sin(w + wr)**2 + 14*cr**2*ct**2*tr*sy.sin(wr)**2 - 14*cr**2*ct**2*tr*sy.sin(w + wr)**2 + 14*cr**2*ct**2*tt*sy.sin(wr)**2 - 14*cr**2*ct**2*tt*sy.sin(w + wr)**2 - 12*cr*ct**3*tr*tt**2*sy.sin(w + wr)**2 + 12*cr*ct**3*tr*tt**2*sy.cos(w + wr)**2 + 7*cr*ct**3*tr*sy.sin(w + wr)**2 - 7*cr*ct**3*tr*sy.cos(w + wr)**2 - 4*cr*ct**3*tt**3*sy.sin(w + wr)**2 + 4*cr*ct**3*tt**3*sy.cos(w + wr)**2 + 21*cr*ct**3*tt*sy.sin(w + wr)**2 - 21*cr*ct**3*tt*sy.cos(w + wr)**2 + 8*ct**4*tt**3*sy.sin(w + wr)**2 - 8*ct**4*tt**3*sy.cos(w + wr)**2 - 14*ct**4*tt*sy.sin(w + wr)**2 + 14*ct**4*tt*sy.cos(w + wr)**2) + 3*w*(16*cr**4*tr**3*sy.sin(2*wr) - 28*cr**4*tr*sy.sin(2*wr) - 12*cr**3*ct*tr**3*sy.sin(2*wr) - 4*cr**3*ct*tr**3*sy.sin(2*w + 2*wr) - 36*cr**3*ct*tr**2*tt*sy.sin(2*wr) - 12*cr**3*ct*tr**2*tt*sy.sin(2*w + 2*wr) + 63*cr**3*ct*tr*sy.sin(2*wr) + 21*cr**3*ct*tr*sy.sin(2*w + 2*wr) + 21*cr**3*ct*tt*sy.sin(2*wr) + 7*cr**3*ct*tt*sy.sin(2*w + 2*wr) + 24*cr**2*ct**2*tr**2*tt*sy.sin(2*wr) + 24*cr**2*ct**2*tr**2*tt*sy.sin(2*w + 2*wr) + 24*cr**2*ct**2*tr*tt**2*sy.sin(2*wr) + 24*cr**2*ct**2*tr*tt**2*sy.sin(2*w + 2*wr) - 42*cr**2*ct**2*tr*sy.sin(2*wr) - 42*cr**2*ct**2*tr*sy.sin(2*w + 2*wr) - 42*cr**2*ct**2*tt*sy.sin(2*wr) - 42*cr**2*ct**2*tt*sy.sin(2*w + 2*wr) - 12*cr*ct**3*tr*tt**2*sy.sin(2*wr) - 36*cr*ct**3*tr*tt**2*sy.sin(2*w + 2*wr) + 7*cr*ct**3*tr*sy.sin(2*wr) + 21*cr*ct**3*tr*sy.sin(2*w + 2*wr) - 4*cr*ct**3*tt**3*sy.sin(2*wr) - 12*cr*ct**3*tt**3*sy.sin(2*w + 2*wr) + 21*cr*ct**3*tt*sy.sin(2*wr) + 63*cr*ct**3*tt*sy.sin(2*w + 2*wr) + 16*ct**4*tt**3*sy.sin(2*w + 2*wr) - 28*ct**4*tt*sy.sin(2*w + 2*wr)))/w**5)/768, (w > -sy.oo) & (w < sy.oo) & (w != 0)), (b_2*p*(-640*cr**2*tr*xcg*zcg - 320*cr*ct*tr*xcg*zcg - 320*cr*ct*tt*xcg*zcg - 640*ct**2*tt*xcg*zcg + (-16*cr**4*tr**3 + 28*cr**4*tr - 4*cr**3*ct*tr**3 - 12*cr**3*ct*tr**2*tt + 21*cr**3*ct*tr + 7*cr**3*ct*tt - 8*cr**2*ct**2*tr**2*tt - 8*cr**2*ct**2*tr*tt**2 + 14*cr**2*ct**2*tr + 14*cr**2*ct**2*tt - 12*cr*ct**3*tr*tt**2 + 7*cr*ct**3*tr - 4*cr*ct**3*tt**3 + 21*cr*ct**3*tt - 16*ct**4*tt**3 + 28*ct**4*tt)*sy.sin(2*wr))/1920, True)) 
# Iyz_cpy = sy.Piecewise((b_2*p*(3*b_2*(-24*cr**3*tr*sy.cos(wr) + 24*cr**3*tr*sy.cos(w + wr) + 48*cr**2*ct*tr*sy.cos(wr) - 48*cr**2*ct*tr*sy.cos(w + wr) + 24*cr**2*ct*tt*sy.cos(wr) - 24*cr**2*ct*tt*sy.cos(w + wr) - 24*cr*ct**2*tr*sy.cos(wr) + 24*cr*ct**2*tr*sy.cos(w + wr) - 48*cr*ct**2*tt*sy.cos(wr) + 48*cr*ct**2*tt*sy.cos(w + wr) - ct**3*tt*w**4*sy.cos(w + wr) + 24*ct**3*tt*sy.cos(wr) - 24*ct**3*tt*sy.cos(w + wr) + w**3*(-cr**3*tr*sy.sin(wr) - cr*ct**2*tr*sy.sin(w + wr) - 2*cr*ct**2*tt*sy.sin(w + wr) + 4*ct**3*tt*sy.sin(w + wr)) + 2*w**2*(3*cr**3*tr*sy.cos(wr) - 2*cr**2*ct*tr*sy.cos(wr) + 2*cr**2*ct*tr*sy.cos(w + wr) - cr**2*ct*tt*sy.cos(wr) + cr**2*ct*tt*sy.cos(w + wr) - 3*cr*ct**2*tr*sy.cos(w + wr) - 6*cr*ct**2*tt*sy.cos(w + wr) + 6*ct**3*tt*sy.cos(w + wr)) + 6*w*(3*cr**3*tr*sy.sin(wr) + cr**3*tr*sy.sin(w + wr) - 4*cr**2*ct*tr*sy.sin(wr) - 4*cr**2*ct*tr*sy.sin(w + wr) - 2*cr**2*ct*tt*sy.sin(wr) - 2*cr**2*ct*tt*sy.sin(w + wr) + cr*ct**2*tr*sy.sin(wr) + 3*cr*ct**2*tr*sy.sin(w + wr) + 2*cr*ct**2*tt*sy.sin(wr) + 6*cr*ct**2*tt*sy.sin(w + wr) - 4*ct**3*tt*sy.sin(w + wr)))/w**5 - 4*cr**2*tr*ycg*zcg - 2*cr*ct*tr*ycg*zcg - 2*cr*ct*tt*ycg*zcg - 4*ct**2*tt*ycg*zcg)/12, (w > -sy.oo) & (w < sy.oo) & (w != 0)), (b_2*p*(b_2*(3*cr**3*tr + 4*cr**2*ct*tr + 2*cr**2*ct*tt + 3*cr*ct**2*tr + 6*cr*ct**2*tt + 12*ct**3*tt)*sy.sin(wr) - 80*cr**2*tr*ycg*zcg - 40*cr*ct*tr*ycg*zcg - 40*cr*ct*tt*ycg*zcg - 80*ct**2*tt*ycg*zcg)/240, True)) 

# w = 0.0

# Ixx_w0 = sy.Piecewise((b_2*p*(-1280*cr**2*tr*ycg**2 - 1280*cr**2*tr*zcg**2 - 640*cr*ct*tr*ycg**2 - 640*cr*ct*tr*zcg**2 - 640*cr*ct*tt*ycg**2 - 640*cr*ct*tt*zcg**2 - 1280*ct**2*tt*ycg**2 - 1280*ct**2*tt*zcg**2 + (-120*cr**4*tr**3*sy.sin(2*wr) + 120*cr**4*tr**3*sy.sin(2*w + 2*wr) + 210*cr**4*tr*sy.sin(2*wr) - 210*cr**4*tr*sy.sin(2*w + 2*wr) + 120*cr**3*ct*tr**3*sy.sin(2*wr) - 120*cr**3*ct*tr**3*sy.sin(2*w + 2*wr) + 360*cr**3*ct*tr**2*tt*sy.sin(2*wr) - 360*cr**3*ct*tr**2*tt*sy.sin(2*w + 2*wr) - 630*cr**3*ct*tr*sy.sin(2*wr) + 630*cr**3*ct*tr*sy.sin(2*w + 2*wr) - 210*cr**3*ct*tt*sy.sin(2*wr) + 210*cr**3*ct*tt*sy.sin(2*w + 2*wr) - 360*cr**2*ct**2*tr**2*tt*sy.sin(2*wr) + 360*cr**2*ct**2*tr**2*tt*sy.sin(2*w + 2*wr) - 360*cr**2*ct**2*tr*tt**2*sy.sin(2*wr) + 360*cr**2*ct**2*tr*tt**2*sy.sin(2*w + 2*wr) + 630*cr**2*ct**2*tr*sy.sin(2*wr) - 630*cr**2*ct**2*tr*sy.sin(2*w + 2*wr) + 630*cr**2*ct**2*tt*sy.sin(2*wr) - 630*cr**2*ct**2*tt*sy.sin(2*w + 2*wr) + 360*cr*ct**3*tr*tt**2*sy.sin(2*wr) - 360*cr*ct**3*tr*tt**2*sy.sin(2*w + 2*wr) - 210*cr*ct**3*tr*sy.sin(2*wr) + 210*cr*ct**3*tr*sy.sin(2*w + 2*wr) + 120*cr*ct**3*tt**3*sy.sin(2*wr) - 120*cr*ct**3*tt**3*sy.sin(2*w + 2*wr) - 630*cr*ct**3*tt*sy.sin(2*wr) + 630*cr*ct**3*tt*sy.sin(2*w + 2*wr) - 120*ct**4*tt**3*sy.sin(2*wr) + 120*ct**4*tt**3*sy.sin(2*w + 2*wr) + 210*ct**4*tt*sy.sin(2*wr) - 210*ct**4*tt*sy.sin(2*w + 2*wr) + 2*w**5*(64*b_2**2*cr**2*tr + 96*b_2**2*cr*ct*tr + 96*b_2**2*cr*ct*tt + 384*b_2**2*ct**2*tt + 16*cr**4*tr**3 + 28*cr**4*tr + 4*cr**3*ct*tr**3 + 12*cr**3*ct*tr**2*tt + 21*cr**3*ct*tr + 7*cr**3*ct*tt + 8*cr**2*ct**2*tr**2*tt + 8*cr**2*ct**2*tr*tt**2 + 14*cr**2*ct**2*tr + 14*cr**2*ct**2*tt + 12*cr*ct**3*tr*tt**2 + 7*cr*ct**3*tr + 4*cr*ct**3*tt**3 + 21*cr*ct**3*tt + 16*ct**4*tt**3 + 28*ct**4*tt) + 20*w**4*(-4*cr**4*tr**3*sy.sin(2*wr) + 7*cr**4*tr*sy.sin(2*wr) + 4*ct**4*tt**3*sy.sin(2*w + 2*wr) - 7*ct**4*tt*sy.sin(2*w + 2*wr)) + 10*w**3*(16*cr**4*tr**3*sy.cos(2*wr) - 28*cr**4*tr*sy.cos(2*wr) - 4*cr**3*ct*tr**3*sy.cos(2*wr) - 12*cr**3*ct*tr**2*tt*sy.cos(2*wr) + 21*cr**3*ct*tr*sy.cos(2*wr) + 7*cr**3*ct*tt*sy.cos(2*wr) - 12*cr*ct**3*tr*tt**2*sy.cos(2*w + 2*wr) + 7*cr*ct**3*tr*sy.cos(2*w + 2*wr) - 4*cr*ct**3*tt**3*sy.cos(2*w + 2*wr) + 21*cr*ct**3*tt*sy.cos(2*w + 2*wr) + 16*ct**4*tt**3*sy.cos(2*w + 2*wr) - 28*ct**4*tt*sy.cos(2*w + 2*wr)) + 30*w**2*(8*cr**4*tr**3*sy.sin(2*wr) - 14*cr**4*tr*sy.sin(2*wr) - 4*cr**3*ct*tr**3*sy.sin(2*wr) - 12*cr**3*ct*tr**2*tt*sy.sin(2*wr) + 21*cr**3*ct*tr*sy.sin(2*wr) + 7*cr**3*ct*tt*sy.sin(2*wr) + 4*cr**2*ct**2*tr**2*tt*sy.sin(2*wr) - 4*cr**2*ct**2*tr**2*tt*sy.sin(2*w + 2*wr) + 4*cr**2*ct**2*tr*tt**2*sy.sin(2*wr) - 4*cr**2*ct**2*tr*tt**2*sy.sin(2*w + 2*wr) - 7*cr**2*ct**2*tr*sy.sin(2*wr) + 7*cr**2*ct**2*tr*sy.sin(2*w + 2*wr) - 7*cr**2*ct**2*tt*sy.sin(2*wr) + 7*cr**2*ct**2*tt*sy.sin(2*w + 2*wr) + 12*cr*ct**3*tr*tt**2*sy.sin(2*w + 2*wr) - 7*cr*ct**3*tr*sy.sin(2*w + 2*wr) + 4*cr*ct**3*tt**3*sy.sin(2*w + 2*wr) - 21*cr*ct**3*tt*sy.sin(2*w + 2*wr) - 8*ct**4*tt**3*sy.sin(2*w + 2*wr) + 14*ct**4*tt*sy.sin(2*w + 2*wr)) + 15*w*(-16*cr**4*tr**3*sy.cos(2*wr) + 28*cr**4*tr*sy.cos(2*wr) + 12*cr**3*ct*tr**3*sy.cos(2*wr) + 4*cr**3*ct*tr**3*sy.cos(2*w + 2*wr) + 36*cr**3*ct*tr**2*tt*sy.cos(2*wr) + 12*cr**3*ct*tr**2*tt*sy.cos(2*w + 2*wr) - 63*cr**3*ct*tr*sy.cos(2*wr) - 21*cr**3*ct*tr*sy.cos(2*w + 2*wr) - 21*cr**3*ct*tt*sy.cos(2*wr) - 7*cr**3*ct*tt*sy.cos(2*w + 2*wr) - 24*cr**2*ct**2*tr**2*tt*sy.cos(2*wr) - 24*cr**2*ct**2*tr**2*tt*sy.cos(2*w + 2*wr) - 24*cr**2*ct**2*tr*tt**2*sy.cos(2*wr) - 24*cr**2*ct**2*tr*tt**2*sy.cos(2*w + 2*wr) + 42*cr**2*ct**2*tr*sy.cos(2*wr) + 42*cr**2*ct**2*tr*sy.cos(2*w + 2*wr) + 42*cr**2*ct**2*tt*sy.cos(2*wr) + 42*cr**2*ct**2*tt*sy.cos(2*w + 2*wr) + 12*cr*ct**3*tr*tt**2*sy.cos(2*wr) + 36*cr*ct**3*tr*tt**2*sy.cos(2*w + 2*wr) - 7*cr*ct**3*tr*sy.cos(2*wr) - 21*cr*ct**3*tr*sy.cos(2*w + 2*wr) + 4*cr*ct**3*tt**3*sy.cos(2*wr) + 12*cr*ct**3*tt**3*sy.cos(2*w + 2*wr) - 21*cr*ct**3*tt*sy.cos(2*wr) - 63*cr*ct**3*tt*sy.cos(2*w + 2*wr) - 16*ct**4*tt**3*sy.cos(2*w + 2*wr) + 28*ct**4*tt*sy.cos(2*w + 2*wr)))/w**5)/3840, (w > -sy.oo) & (w < sy.oo) & (w != 0)), (b_2*p*(32*b_2**2*cr**2*tr + 48*b_2**2*cr*ct*tr + 48*b_2**2*cr*ct*tt + 192*b_2**2*ct**2*tt + 16*cr**4*tr**3*sy.cos(wr)**2 - 28*cr**4*tr*sy.cos(wr)**2 + 28*cr**4*tr + 4*cr**3*ct*tr**3*sy.cos(wr)**2 + 12*cr**3*ct*tr**2*tt*sy.cos(wr)**2 - 21*cr**3*ct*tr*sy.cos(wr)**2 + 21*cr**3*ct*tr - 7*cr**3*ct*tt*sy.cos(wr)**2 + 7*cr**3*ct*tt + 8*cr**2*ct**2*tr**2*tt*sy.cos(wr)**2 + 8*cr**2*ct**2*tr*tt**2*sy.cos(wr)**2 - 14*cr**2*ct**2*tr*sy.cos(wr)**2 + 14*cr**2*ct**2*tr - 14*cr**2*ct**2*tt*sy.cos(wr)**2 + 14*cr**2*ct**2*tt - 320*cr**2*tr*ycg**2 - 320*cr**2*tr*zcg**2 + 12*cr*ct**3*tr*tt**2*sy.cos(wr)**2 - 7*cr*ct**3*tr*sy.cos(wr)**2 + 7*cr*ct**3*tr + 4*cr*ct**3*tt**3*sy.cos(wr)**2 - 21*cr*ct**3*tt*sy.cos(wr)**2 + 21*cr*ct**3*tt - 160*cr*ct*tr*ycg**2 - 160*cr*ct*tr*zcg**2 - 160*cr*ct*tt*ycg**2 - 160*cr*ct*tt*zcg**2 + 16*ct**4*tt**3*sy.cos(wr)**2 - 28*ct**4*tt*sy.cos(wr)**2 + 28*ct**4*tt - 320*ct**2*tt*ycg**2 - 320*ct**2*tt*zcg**2)/960, True))
# Iyy_w0 = b_2*p*(32*b_2**2*cr**2*tr*tanL**2 + 48*b_2**2*cr*ct*tr*tanL**2 + 48*b_2**2*cr*ct*tt*tanL**2 + 192*b_2**2*ct**2*tt*tanL**2 + 24*b_2*cr**3*tr*tanL + 32*b_2*cr**2*ct*tr*tanL + 16*b_2*cr**2*ct*tt*tanL + 24*b_2*cr*ct**2*tr*tanL + 48*b_2*cr*ct**2*tt*tanL + 96*b_2*ct**3*tt*tanL + 16*cr**4*tr**3 + 28*cr**4*tr + 4*cr**3*ct*tr**3 + 12*cr**3*ct*tr**2*tt + 21*cr**3*ct*tr + 7*cr**3*ct*tt + 8*cr**2*ct**2*tr**2*tt + 8*cr**2*ct**2*tr*tt**2 + 14*cr**2*ct**2*tr + 14*cr**2*ct**2*tt - 320*cr**2*tr*xcg**2 - 320*cr**2*tr*zcg**2 + 12*cr*ct**3*tr*tt**2 + 7*cr*ct**3*tr + 4*cr*ct**3*tt**3 + 21*cr*ct**3*tt - 160*cr*ct*tr*xcg**2 - 160*cr*ct*tr*zcg**2 - 160*cr*ct*tt*xcg**2 - 160*cr*ct*tt*zcg**2 + 16*ct**4*tt**3 + 28*ct**4*tt - 320*ct**2*tt*xcg**2 - 320*ct**2*tt*zcg**2)/960 
# Izz_w0 = sy.Piecewise((b_2*p*(128*b_2**2*cr**2*tr*tanL**2 + 192*b_2**2*cr*ct*tr*tanL**2 + 192*b_2**2*cr*ct*tt*tanL**2 + 768*b_2**2*ct**2*tt*tanL**2 + 96*b_2*cr**3*tr*tanL + 128*b_2*cr**2*ct*tr*tanL + 64*b_2*cr**2*ct*tt*tanL + 96*b_2*cr*ct**2*tr*tanL + 192*b_2*cr*ct**2*tt*tanL + 384*b_2*ct**3*tt*tanL - 1280*cr**2*tr*xcg**2 - 1280*cr**2*tr*ycg**2 - 640*cr*ct*tr*xcg**2 - 640*cr*ct*tr*ycg**2 - 640*cr*ct*tt*xcg**2 - 640*cr*ct*tt*ycg**2 - 1280*ct**2*tt*xcg**2 - 1280*ct**2*tt*ycg**2 + (120*cr**4*tr**3*sy.sin(2*wr) - 120*cr**4*tr**3*sy.sin(2*w + 2*wr) - 210*cr**4*tr*sy.sin(2*wr) + 210*cr**4*tr*sy.sin(2*w + 2*wr) - 120*cr**3*ct*tr**3*sy.sin(2*wr) + 120*cr**3*ct*tr**3*sy.sin(2*w + 2*wr) - 360*cr**3*ct*tr**2*tt*sy.sin(2*wr) + 360*cr**3*ct*tr**2*tt*sy.sin(2*w + 2*wr) + 630*cr**3*ct*tr*sy.sin(2*wr) - 630*cr**3*ct*tr*sy.sin(2*w + 2*wr) + 210*cr**3*ct*tt*sy.sin(2*wr) - 210*cr**3*ct*tt*sy.sin(2*w + 2*wr) + 360*cr**2*ct**2*tr**2*tt*sy.sin(2*wr) - 360*cr**2*ct**2*tr**2*tt*sy.sin(2*w + 2*wr) + 360*cr**2*ct**2*tr*tt**2*sy.sin(2*wr) - 360*cr**2*ct**2*tr*tt**2*sy.sin(2*w + 2*wr) - 630*cr**2*ct**2*tr*sy.sin(2*wr) + 630*cr**2*ct**2*tr*sy.sin(2*w + 2*wr) - 630*cr**2*ct**2*tt*sy.sin(2*wr) + 630*cr**2*ct**2*tt*sy.sin(2*w + 2*wr) - 360*cr*ct**3*tr*tt**2*sy.sin(2*wr) + 360*cr*ct**3*tr*tt**2*sy.sin(2*w + 2*wr) + 210*cr*ct**3*tr*sy.sin(2*wr) - 210*cr*ct**3*tr*sy.sin(2*w + 2*wr) - 120*cr*ct**3*tt**3*sy.sin(2*wr) + 120*cr*ct**3*tt**3*sy.sin(2*w + 2*wr) + 630*cr*ct**3*tt*sy.sin(2*wr) - 630*cr*ct**3*tt*sy.sin(2*w + 2*wr) + 120*ct**4*tt**3*sy.sin(2*wr) - 120*ct**4*tt**3*sy.sin(2*w + 2*wr) - 210*ct**4*tt*sy.sin(2*wr) + 210*ct**4*tt*sy.sin(2*w + 2*wr) + 2*w**5*(64*b_2**2*cr**2*tr + 96*b_2**2*cr*ct*tr + 96*b_2**2*cr*ct*tt + 384*b_2**2*ct**2*tt + 16*cr**4*tr**3 + 28*cr**4*tr + 4*cr**3*ct*tr**3 + 12*cr**3*ct*tr**2*tt + 21*cr**3*ct*tr + 7*cr**3*ct*tt + 8*cr**2*ct**2*tr**2*tt + 8*cr**2*ct**2*tr*tt**2 + 14*cr**2*ct**2*tr + 14*cr**2*ct**2*tt + 12*cr*ct**3*tr*tt**2 + 7*cr*ct**3*tr + 4*cr*ct**3*tt**3 + 21*cr*ct**3*tt + 16*ct**4*tt**3 + 28*ct**4*tt) + 20*w**4*(4*cr**4*tr**3*sy.sin(2*wr) - 7*cr**4*tr*sy.sin(2*wr) - 4*ct**4*tt**3*sy.sin(2*w + 2*wr) + 7*ct**4*tt*sy.sin(2*w + 2*wr)) + 10*w**3*(-16*cr**4*tr**3*sy.cos(2*wr) + 28*cr**4*tr*sy.cos(2*wr) + 4*cr**3*ct*tr**3*sy.cos(2*wr) + 12*cr**3*ct*tr**2*tt*sy.cos(2*wr) - 21*cr**3*ct*tr*sy.cos(2*wr) - 7*cr**3*ct*tt*sy.cos(2*wr) + 12*cr*ct**3*tr*tt**2*sy.cos(2*w + 2*wr) - 7*cr*ct**3*tr*sy.cos(2*w + 2*wr) + 4*cr*ct**3*tt**3*sy.cos(2*w + 2*wr) - 21*cr*ct**3*tt*sy.cos(2*w + 2*wr) - 16*ct**4*tt**3*sy.cos(2*w + 2*wr) + 28*ct**4*tt*sy.cos(2*w + 2*wr)) + 30*w**2*(-8*cr**4*tr**3*sy.sin(2*wr) + 14*cr**4*tr*sy.sin(2*wr) + 4*cr**3*ct*tr**3*sy.sin(2*wr) + 12*cr**3*ct*tr**2*tt*sy.sin(2*wr) - 21*cr**3*ct*tr*sy.sin(2*wr) - 7*cr**3*ct*tt*sy.sin(2*wr) - 4*cr**2*ct**2*tr**2*tt*sy.sin(2*wr) + 4*cr**2*ct**2*tr**2*tt*sy.sin(2*w + 2*wr) - 4*cr**2*ct**2*tr*tt**2*sy.sin(2*wr) + 4*cr**2*ct**2*tr*tt**2*sy.sin(2*w + 2*wr) + 7*cr**2*ct**2*tr*sy.sin(2*wr) - 7*cr**2*ct**2*tr*sy.sin(2*w + 2*wr) + 7*cr**2*ct**2*tt*sy.sin(2*wr) - 7*cr**2*ct**2*tt*sy.sin(2*w + 2*wr) - 12*cr*ct**3*tr*tt**2*sy.sin(2*w + 2*wr) + 7*cr*ct**3*tr*sy.sin(2*w + 2*wr) - 4*cr*ct**3*tt**3*sy.sin(2*w + 2*wr) + 21*cr*ct**3*tt*sy.sin(2*w + 2*wr) + 8*ct**4*tt**3*sy.sin(2*w + 2*wr) - 14*ct**4*tt*sy.sin(2*w + 2*wr)) + 15*w*(16*cr**4*tr**3*sy.cos(2*wr) - 28*cr**4*tr*sy.cos(2*wr) - 12*cr**3*ct*tr**3*sy.cos(2*wr) - 4*cr**3*ct*tr**3*sy.cos(2*w + 2*wr) - 36*cr**3*ct*tr**2*tt*sy.cos(2*wr) - 12*cr**3*ct*tr**2*tt*sy.cos(2*w + 2*wr) + 63*cr**3*ct*tr*sy.cos(2*wr) + 21*cr**3*ct*tr*sy.cos(2*w + 2*wr) + 21*cr**3*ct*tt*sy.cos(2*wr) + 7*cr**3*ct*tt*sy.cos(2*w + 2*wr) + 24*cr**2*ct**2*tr**2*tt*sy.cos(2*wr) + 24*cr**2*ct**2*tr**2*tt*sy.cos(2*w + 2*wr) + 24*cr**2*ct**2*tr*tt**2*sy.cos(2*wr) + 24*cr**2*ct**2*tr*tt**2*sy.cos(2*w + 2*wr) - 42*cr**2*ct**2*tr*sy.cos(2*wr) - 42*cr**2*ct**2*tr*sy.cos(2*w + 2*wr) - 42*cr**2*ct**2*tt*sy.cos(2*wr) - 42*cr**2*ct**2*tt*sy.cos(2*w + 2*wr) - 12*cr*ct**3*tr*tt**2*sy.cos(2*wr) - 36*cr*ct**3*tr*tt**2*sy.cos(2*w + 2*wr) + 7*cr*ct**3*tr*sy.cos(2*wr) + 21*cr*ct**3*tr*sy.cos(2*w + 2*wr) - 4*cr*ct**3*tt**3*sy.cos(2*wr) - 12*cr*ct**3*tt**3*sy.cos(2*w + 2*wr) + 21*cr*ct**3*tt*sy.cos(2*wr) + 63*cr*ct**3*tt*sy.cos(2*w + 2*wr) + 16*ct**4*tt**3*sy.cos(2*w + 2*wr) - 28*ct**4*tt*sy.cos(2*w + 2*wr)))/w**5)/3840, (w > -sy.oo) & (w < sy.oo) & (w != 0)), (b_2*p*(32*b_2**2*cr**2*tr/sy.cos(Lr)**2 + 48*b_2**2*cr*ct*tr/sy.cos(Lr)**2 + 48*b_2**2*cr*ct*tt/sy.cos(Lr)**2 + 192*b_2**2*ct**2*tt/sy.cos(Lr)**2 + 24*b_2*cr**3*tr*tanL + 32*b_2*cr**2*ct*tr*tanL + 16*b_2*cr**2*ct*tt*tanL + 24*b_2*cr*ct**2*tr*tanL + 48*b_2*cr*ct**2*tt*tanL + 96*b_2*ct**3*tt*tanL + 16*cr**4*tr**3*sy.sin(wr)**2 - 28*cr**4*tr*sy.sin(wr)**2 + 28*cr**4*tr + 4*cr**3*ct*tr**3*sy.sin(wr)**2 + 12*cr**3*ct*tr**2*tt*sy.sin(wr)**2 - 21*cr**3*ct*tr*sy.sin(wr)**2 + 21*cr**3*ct*tr - 7*cr**3*ct*tt*sy.sin(wr)**2 + 7*cr**3*ct*tt + 8*cr**2*ct**2*tr**2*tt*sy.sin(wr)**2 + 8*cr**2*ct**2*tr*tt**2*sy.sin(wr)**2 - 14*cr**2*ct**2*tr*sy.sin(wr)**2 + 14*cr**2*ct**2*tr - 14*cr**2*ct**2*tt*sy.sin(wr)**2 + 14*cr**2*ct**2*tt - 320*cr**2*tr*xcg**2 - 320*cr**2*tr*ycg**2 + 12*cr*ct**3*tr*tt**2*sy.sin(wr)**2 - 7*cr*ct**3*tr*sy.sin(wr)**2 + 7*cr*ct**3*tr + 4*cr*ct**3*tt**3*sy.sin(wr)**2 - 21*cr*ct**3*tt*sy.sin(wr)**2 + 21*cr*ct**3*tt - 160*cr*ct*tr*xcg**2 - 160*cr*ct*tr*ycg**2 - 160*cr*ct*tt*xcg**2 - 160*cr*ct*tt*ycg**2 + 16*ct**4*tt**3*sy.sin(wr)**2 - 28*ct**4*tt*sy.sin(wr)**2 + 28*ct**4*tt - 320*ct**2*tt*xcg**2 - 320*ct**2*tt*ycg**2)/960, True)) 
# Ixy_w0 = sy.Piecewise((b_2*p*(-2*b_2**2*cr**2*tr*tanL - 3*b_2**2*cr*ct*tr*tanL - 3*b_2**2*cr*ct*tt*tanL - 12*b_2**2*ct**2*tt*tanL + 15*b_2*(-24*cr**3*tr*sy.sin(wr) + 24*cr**3*tr*sy.sin(w + wr) + 48*cr**2*ct*tr*sy.sin(wr) - 48*cr**2*ct*tr*sy.sin(w + wr) + 24*cr**2*ct*tt*sy.sin(wr) - 24*cr**2*ct*tt*sy.sin(w + wr) - 24*cr*ct**2*tr*sy.sin(wr) + 24*cr*ct**2*tr*sy.sin(w + wr) - 48*cr*ct**2*tt*sy.sin(wr) + 48*cr*ct**2*tt*sy.sin(w + wr) - ct**3*tt*w**4*sy.sin(w + wr) + 24*ct**3*tt*sy.sin(wr) - 24*ct**3*tt*sy.sin(w + wr) + w**3*(cr**3*tr*sy.cos(wr) + cr*ct**2*tr*sy.cos(w + wr) + 2*cr*ct**2*tt*sy.cos(w + wr) - 4*ct**3*tt*sy.cos(w + wr)) + 2*w**2*(3*cr**3*tr*sy.sin(wr) - 2*cr**2*ct*tr*sy.sin(wr) + 2*cr**2*ct*tr*sy.sin(w + wr) - cr**2*ct*tt*sy.sin(wr) + cr**2*ct*tt*sy.sin(w + wr) - 3*cr*ct**2*tr*sy.sin(w + wr) - 6*cr*ct**2*tt*sy.sin(w + wr) + 6*ct**3*tt*sy.sin(w + wr)) + 6*w*(-3*cr**3*tr*sy.cos(wr) - cr**3*tr*sy.cos(w + wr) + 4*cr**2*ct*tr*sy.cos(wr) + 4*cr**2*ct*tr*sy.cos(w + wr) + 2*cr**2*ct*tt*sy.cos(wr) + 2*cr**2*ct*tt*sy.cos(w + wr) - cr*ct**2*tr*sy.cos(wr) - 3*cr*ct**2*tr*sy.cos(w + wr) - 2*cr*ct**2*tt*sy.cos(wr) - 6*cr*ct**2*tt*sy.cos(w + wr) + 4*ct**3*tt*sy.cos(w + wr)))/w**5 - 20*cr**2*tr*xcg*ycg - 10*cr*ct*tr*xcg*ycg - 10*cr*ct*tt*xcg*ycg - 20*ct**2*tt*xcg*ycg)/60, (w > -sy.oo) & (w < sy.oo) & (w != 0)), (-b_2*p*(8*b_2**2*cr**2*tr*tanL + 12*b_2**2*cr*ct*tr*tanL + 12*b_2**2*cr*ct*tt*tanL + 48*b_2**2*ct**2*tt*tanL + b_2*(3*cr**3*tr + 4*cr**2*ct*tr + 2*cr**2*ct*tt + 3*cr*ct**2*tr + 6*cr*ct**2*tt + 12*ct**3*tt)*sy.cos(wr) + 80*cr**2*tr*xcg*ycg + 40*cr*ct*tr*xcg*ycg + 40*cr*ct*tt*xcg*ycg + 80*ct**2*tt*xcg*ycg)/240, True)) 
# Ixz_w0 = sy.Piecewise((b_2*p*(-256*cr**2*tr*xcg*zcg - 128*cr*ct*tr*xcg*zcg - 128*cr*ct*tt*xcg*zcg - 256*ct**2*tt*xcg*zcg + (48*cr**4*tr**3*sy.sin(wr)**2 - 48*cr**4*tr**3*sy.sin(w + wr)**2 - 84*cr**4*tr*sy.sin(wr)**2 + 84*cr**4*tr*sy.sin(w + wr)**2 - 48*cr**3*ct*tr**3*sy.sin(wr)**2 + 48*cr**3*ct*tr**3*sy.sin(w + wr)**2 - 144*cr**3*ct*tr**2*tt*sy.sin(wr)**2 + 144*cr**3*ct*tr**2*tt*sy.sin(w + wr)**2 + 252*cr**3*ct*tr*sy.sin(wr)**2 - 252*cr**3*ct*tr*sy.sin(w + wr)**2 + 84*cr**3*ct*tt*sy.sin(wr)**2 - 84*cr**3*ct*tt*sy.sin(w + wr)**2 + 144*cr**2*ct**2*tr**2*tt*sy.sin(wr)**2 - 144*cr**2*ct**2*tr**2*tt*sy.sin(w + wr)**2 + 144*cr**2*ct**2*tr*tt**2*sy.sin(wr)**2 - 144*cr**2*ct**2*tr*tt**2*sy.sin(w + wr)**2 - 252*cr**2*ct**2*tr*sy.sin(wr)**2 + 252*cr**2*ct**2*tr*sy.sin(w + wr)**2 - 252*cr**2*ct**2*tt*sy.sin(wr)**2 + 252*cr**2*ct**2*tt*sy.sin(w + wr)**2 - 144*cr*ct**3*tr*tt**2*sy.sin(wr)**2 + 144*cr*ct**3*tr*tt**2*sy.sin(w + wr)**2 + 84*cr*ct**3*tr*sy.sin(wr)**2 - 84*cr*ct**3*tr*sy.sin(w + wr)**2 - 48*cr*ct**3*tt**3*sy.sin(wr)**2 + 48*cr*ct**3*tt**3*sy.sin(w + wr)**2 + 252*cr*ct**3*tt*sy.sin(wr)**2 - 252*cr*ct**3*tt*sy.sin(w + wr)**2 + 48*ct**4*tt**3*sy.sin(wr)**2 - 48*ct**4*tt**3*sy.sin(w + wr)**2 - 84*ct**4*tt*sy.sin(wr)**2 + 84*ct**4*tt*sy.sin(w + wr)**2 + 4*w**4*(8*cr**4*tr**3*sy.sin(wr)**2 - 4*cr**4*tr**3*sy.sin(w + wr)**2 - 4*cr**4*tr**3*sy.cos(w + wr)**2 - 14*cr**4*tr*sy.sin(wr)**2 + 7*cr**4*tr*sy.sin(w + wr)**2 + 7*cr**4*tr*sy.cos(w + wr)**2 - 4*ct**4*tt**3*sy.sin(w + wr)**2 + 4*ct**4*tt**3*sy.cos(w + wr)**2 + 7*ct**4*tt*sy.sin(w + wr)**2 - 7*ct**4*tt*sy.cos(w + wr)**2) + 2*w**3*(-16*cr**4*tr**3*sy.sin(2*wr) + 28*cr**4*tr*sy.sin(2*wr) + 4*cr**3*ct*tr**3*sy.sin(2*wr) + 12*cr**3*ct*tr**2*tt*sy.sin(2*wr) - 21*cr**3*ct*tr*sy.sin(2*wr) - 7*cr**3*ct*tt*sy.sin(2*wr) + 12*cr*ct**3*tr*tt**2*sy.sin(2*w + 2*wr) - 7*cr*ct**3*tr*sy.sin(2*w + 2*wr) + 4*cr*ct**3*tt**3*sy.sin(2*w + 2*wr) - 21*cr*ct**3*tt*sy.sin(2*w + 2*wr) - 16*ct**4*tt**3*sy.sin(2*w + 2*wr) + 28*ct**4*tt*sy.sin(2*w + 2*wr)) + 6*w**2*(-16*cr**4*tr**3*sy.sin(wr)**2 + 8*cr**4*tr**3*sy.sin(w + wr)**2 + 8*cr**4*tr**3*sy.cos(w + wr)**2 + 28*cr**4*tr*sy.sin(wr)**2 - 14*cr**4*tr*sy.sin(w + wr)**2 - 14*cr**4*tr*sy.cos(w + wr)**2 + 8*cr**3*ct*tr**3*sy.sin(wr)**2 - 4*cr**3*ct*tr**3*sy.sin(w + wr)**2 - 4*cr**3*ct*tr**3*sy.cos(w + wr)**2 + 24*cr**3*ct*tr**2*tt*sy.sin(wr)**2 - 12*cr**3*ct*tr**2*tt*sy.sin(w + wr)**2 - 12*cr**3*ct*tr**2*tt*sy.cos(w + wr)**2 - 42*cr**3*ct*tr*sy.sin(wr)**2 + 21*cr**3*ct*tr*sy.sin(w + wr)**2 + 21*cr**3*ct*tr*sy.cos(w + wr)**2 - 14*cr**3*ct*tt*sy.sin(wr)**2 + 7*cr**3*ct*tt*sy.sin(w + wr)**2 + 7*cr**3*ct*tt*sy.cos(w + wr)**2 - 8*cr**2*ct**2*tr**2*tt*sy.sin(wr)**2 + 8*cr**2*ct**2*tr**2*tt*sy.sin(w + wr)**2 - 8*cr**2*ct**2*tr*tt**2*sy.sin(wr)**2 + 8*cr**2*ct**2*tr*tt**2*sy.sin(w + wr)**2 + 14*cr**2*ct**2*tr*sy.sin(wr)**2 - 14*cr**2*ct**2*tr*sy.sin(w + wr)**2 + 14*cr**2*ct**2*tt*sy.sin(wr)**2 - 14*cr**2*ct**2*tt*sy.sin(w + wr)**2 - 12*cr*ct**3*tr*tt**2*sy.sin(w + wr)**2 + 12*cr*ct**3*tr*tt**2*sy.cos(w + wr)**2 + 7*cr*ct**3*tr*sy.sin(w + wr)**2 - 7*cr*ct**3*tr*sy.cos(w + wr)**2 - 4*cr*ct**3*tt**3*sy.sin(w + wr)**2 + 4*cr*ct**3*tt**3*sy.cos(w + wr)**2 + 21*cr*ct**3*tt*sy.sin(w + wr)**2 - 21*cr*ct**3*tt*sy.cos(w + wr)**2 + 8*ct**4*tt**3*sy.sin(w + wr)**2 - 8*ct**4*tt**3*sy.cos(w + wr)**2 - 14*ct**4*tt*sy.sin(w + wr)**2 + 14*ct**4*tt*sy.cos(w + wr)**2) + 3*w*(16*cr**4*tr**3*sy.sin(2*wr) - 28*cr**4*tr*sy.sin(2*wr) - 12*cr**3*ct*tr**3*sy.sin(2*wr) - 4*cr**3*ct*tr**3*sy.sin(2*w + 2*wr) - 36*cr**3*ct*tr**2*tt*sy.sin(2*wr) - 12*cr**3*ct*tr**2*tt*sy.sin(2*w + 2*wr) + 63*cr**3*ct*tr*sy.sin(2*wr) + 21*cr**3*ct*tr*sy.sin(2*w + 2*wr) + 21*cr**3*ct*tt*sy.sin(2*wr) + 7*cr**3*ct*tt*sy.sin(2*w + 2*wr) + 24*cr**2*ct**2*tr**2*tt*sy.sin(2*wr) + 24*cr**2*ct**2*tr**2*tt*sy.sin(2*w + 2*wr) + 24*cr**2*ct**2*tr*tt**2*sy.sin(2*wr) + 24*cr**2*ct**2*tr*tt**2*sy.sin(2*w + 2*wr) - 42*cr**2*ct**2*tr*sy.sin(2*wr) - 42*cr**2*ct**2*tr*sy.sin(2*w + 2*wr) - 42*cr**2*ct**2*tt*sy.sin(2*wr) - 42*cr**2*ct**2*tt*sy.sin(2*w + 2*wr) - 12*cr*ct**3*tr*tt**2*sy.sin(2*wr) - 36*cr*ct**3*tr*tt**2*sy.sin(2*w + 2*wr) + 7*cr*ct**3*tr*sy.sin(2*wr) + 21*cr*ct**3*tr*sy.sin(2*w + 2*wr) - 4*cr*ct**3*tt**3*sy.sin(2*wr) - 12*cr*ct**3*tt**3*sy.sin(2*w + 2*wr) + 21*cr*ct**3*tt*sy.sin(2*wr) + 63*cr*ct**3*tt*sy.sin(2*w + 2*wr) + 16*ct**4*tt**3*sy.sin(2*w + 2*wr) - 28*ct**4*tt*sy.sin(2*w + 2*wr)))/w**5)/768, (w > -sy.oo) & (w < sy.oo) & (w != 0)), (b_2*p*(-640*cr**2*tr*xcg*zcg - 320*cr*ct*tr*xcg*zcg - 320*cr*ct*tt*xcg*zcg - 640*ct**2*tt*xcg*zcg + (-16*cr**4*tr**3 + 28*cr**4*tr - 4*cr**3*ct*tr**3 - 12*cr**3*ct*tr**2*tt + 21*cr**3*ct*tr + 7*cr**3*ct*tt - 8*cr**2*ct**2*tr**2*tt - 8*cr**2*ct**2*tr*tt**2 + 14*cr**2*ct**2*tr + 14*cr**2*ct**2*tt - 12*cr*ct**3*tr*tt**2 + 7*cr*ct**3*tr - 4*cr*ct**3*tt**3 + 21*cr*ct**3*tt - 16*ct**4*tt**3 + 28*ct**4*tt)*sy.sin(2*wr))/1920, True)) 
# Iyz_w0 = sy.Piecewise((b_2*p*(3*b_2*(-24*cr**3*tr*sy.cos(wr) + 24*cr**3*tr*sy.cos(w + wr) + 48*cr**2*ct*tr*sy.cos(wr) - 48*cr**2*ct*tr*sy.cos(w + wr) + 24*cr**2*ct*tt*sy.cos(wr) - 24*cr**2*ct*tt*sy.cos(w + wr) - 24*cr*ct**2*tr*sy.cos(wr) + 24*cr*ct**2*tr*sy.cos(w + wr) - 48*cr*ct**2*tt*sy.cos(wr) + 48*cr*ct**2*tt*sy.cos(w + wr) - ct**3*tt*w**4*sy.cos(w + wr) + 24*ct**3*tt*sy.cos(wr) - 24*ct**3*tt*sy.cos(w + wr) + w**3*(-cr**3*tr*sy.sin(wr) - cr*ct**2*tr*sy.sin(w + wr) - 2*cr*ct**2*tt*sy.sin(w + wr) + 4*ct**3*tt*sy.sin(w + wr)) + 2*w**2*(3*cr**3*tr*sy.cos(wr) - 2*cr**2*ct*tr*sy.cos(wr) + 2*cr**2*ct*tr*sy.cos(w + wr) - cr**2*ct*tt*sy.cos(wr) + cr**2*ct*tt*sy.cos(w + wr) - 3*cr*ct**2*tr*sy.cos(w + wr) - 6*cr*ct**2*tt*sy.cos(w + wr) + 6*ct**3*tt*sy.cos(w + wr)) + 6*w*(3*cr**3*tr*sy.sin(wr) + cr**3*tr*sy.sin(w + wr) - 4*cr**2*ct*tr*sy.sin(wr) - 4*cr**2*ct*tr*sy.sin(w + wr) - 2*cr**2*ct*tt*sy.sin(wr) - 2*cr**2*ct*tt*sy.sin(w + wr) + cr*ct**2*tr*sy.sin(wr) + 3*cr*ct**2*tr*sy.sin(w + wr) + 2*cr*ct**2*tt*sy.sin(wr) + 6*cr*ct**2*tt*sy.sin(w + wr) - 4*ct**3*tt*sy.sin(w + wr)))/w**5 - 4*cr**2*tr*ycg*zcg - 2*cr*ct*tr*ycg*zcg - 2*cr*ct*tt*ycg*zcg - 4*ct**2*tt*ycg*zcg)/12, (w > -sy.oo) & (w < sy.oo) & (w != 0)), (b_2*p*(b_2*(3*cr**3*tr + 4*cr**2*ct*tr + 2*cr**2*ct*tt + 3*cr*ct**2*tr + 6*cr*ct**2*tt + 12*ct**3*tt)*sy.sin(wr) - 80*cr**2*tr*ycg*zcg - 40*cr*ct*tr*ycg*zcg - 40*cr*ct*tt*ycg*zcg - 80*ct**2*tt*ycg*zcg)/240, True)) 

# Ixx_w0 = ksubs(Ixx_w0)
# Iyy_w0 = ksubs(Iyy_w0)
# Izz_w0 = ksubs(Izz_w0)
# Ixy_w0 = ksubs(Ixy_w0)
# Ixz_w0 = ksubs(Ixz_w0)
# Iyz_w0 = ksubs(Iyz_w0)

# print("Ixx diff =", simp(Ixx_new - Ixx_cpy))
# print("Iyy diff =", simp(Iyy_new - Iyy_cpy))
# print("Izz diff =", simp(Izz_new - Izz_cpy))
# print("Ixy diff =", simp(Ixy_new - Ixy_cpy))
# print("Ixz diff =", simp(Ixz_new - Ixz_cpy))
# print("Iyz diff =", simp(Iyz_new - Iyz_cpy))

# replacements
# Piecewise ==> sy.Piecewise
# b/2 ==> b_2
# c_r ==> cr
# c_t ==> ct
# tan(Λ_r) ==> tanL
# Λ_r ==> Lr
# t_r ==> tr
# t_t ==> tt
# ω_r ==> wr
# ω ==> w
# x_cg ==> xcg
# y_cg ==> ycg
# z_cg ==> zcg
# sin ==> sy.sin
# cos ==> sy.cos
# oo ==> sy.oo
# Ne ==> fix these to !=

# # output
# Ixx_cpy  = Piecewise((b/2*p*(-1280*c_r**2*t_r*y_cg**2 - 1280*c_r**2*t_r*z_cg**2 - 640*c_r*c_t*t_r*y_cg**2 - 640*c_r*c_t*t_r*z_cg**2 - 640*c_r*c_t*t_t*y_cg**2 - 640*c_r*c_t*t_t*z_cg**2 - 1280*c_t**2*t_t*y_cg**2 - 1280*c_t**2*t_t*z_cg**2 + (-120*c_r**4*t_r**3*sin(2*ω_r) + 120*c_r**4*t_r**3*sin(2*ω + 2*ω_r) + 210*c_r**4*t_r*sin(2*ω_r) - 210*c_r**4*t_r*sin(2*ω + 2*ω_r) + 120*c_r**3*c_t*t_r**3*sin(2*ω_r) - 120*c_r**3*c_t*t_r**3*sin(2*ω + 2*ω_r) + 360*c_r**3*c_t*t_r**2*t_t*sin(2*ω_r) - 360*c_r**3*c_t*t_r**2*t_t*sin(2*ω + 2*ω_r) - 630*c_r**3*c_t*t_r*sin(2*ω_r) + 630*c_r**3*c_t*t_r*sin(2*ω + 2*ω_r) - 210*c_r**3*c_t*t_t*sin(2*ω_r) + 210*c_r**3*c_t*t_t*sin(2*ω + 2*ω_r) - 360*c_r**2*c_t**2*t_r**2*t_t*sin(2*ω_r) + 360*c_r**2*c_t**2*t_r**2*t_t*sin(2*ω + 2*ω_r) - 360*c_r**2*c_t**2*t_r*t_t**2*sin(2*ω_r) + 360*c_r**2*c_t**2*t_r*t_t**2*sin(2*ω + 2*ω_r) + 630*c_r**2*c_t**2*t_r*sin(2*ω_r) - 630*c_r**2*c_t**2*t_r*sin(2*ω + 2*ω_r) + 630*c_r**2*c_t**2*t_t*sin(2*ω_r) - 630*c_r**2*c_t**2*t_t*sin(2*ω + 2*ω_r) + 360*c_r*c_t**3*t_r*t_t**2*sin(2*ω_r) - 360*c_r*c_t**3*t_r*t_t**2*sin(2*ω + 2*ω_r) - 210*c_r*c_t**3*t_r*sin(2*ω_r) + 210*c_r*c_t**3*t_r*sin(2*ω + 2*ω_r) + 120*c_r*c_t**3*t_t**3*sin(2*ω_r) - 120*c_r*c_t**3*t_t**3*sin(2*ω + 2*ω_r) - 630*c_r*c_t**3*t_t*sin(2*ω_r) + 630*c_r*c_t**3*t_t*sin(2*ω + 2*ω_r) - 120*c_t**4*t_t**3*sin(2*ω_r) + 120*c_t**4*t_t**3*sin(2*ω + 2*ω_r) + 210*c_t**4*t_t*sin(2*ω_r) - 210*c_t**4*t_t*sin(2*ω + 2*ω_r) + 2*ω**5*(64*b/2**2*c_r**2*t_r + 96*b/2**2*c_r*c_t*t_r + 96*b/2**2*c_r*c_t*t_t + 384*b/2**2*c_t**2*t_t + 16*c_r**4*t_r**3 + 28*c_r**4*t_r + 4*c_r**3*c_t*t_r**3 + 12*c_r**3*c_t*t_r**2*t_t + 21*c_r**3*c_t*t_r + 7*c_r**3*c_t*t_t + 8*c_r**2*c_t**2*t_r**2*t_t + 8*c_r**2*c_t**2*t_r*t_t**2 + 14*c_r**2*c_t**2*t_r + 14*c_r**2*c_t**2*t_t + 12*c_r*c_t**3*t_r*t_t**2 + 7*c_r*c_t**3*t_r + 4*c_r*c_t**3*t_t**3 + 21*c_r*c_t**3*t_t + 16*c_t**4*t_t**3 + 28*c_t**4*t_t) + 20*ω**4*(-4*c_r**4*t_r**3*sin(2*ω_r) + 7*c_r**4*t_r*sin(2*ω_r) + 4*c_t**4*t_t**3*sin(2*ω + 2*ω_r) - 7*c_t**4*t_t*sin(2*ω + 2*ω_r)) + 10*ω**3*(16*c_r**4*t_r**3*cos(2*ω_r) - 28*c_r**4*t_r*cos(2*ω_r) - 4*c_r**3*c_t*t_r**3*cos(2*ω_r) - 12*c_r**3*c_t*t_r**2*t_t*cos(2*ω_r) + 21*c_r**3*c_t*t_r*cos(2*ω_r) + 7*c_r**3*c_t*t_t*cos(2*ω_r) - 12*c_r*c_t**3*t_r*t_t**2*cos(2*ω + 2*ω_r) + 7*c_r*c_t**3*t_r*cos(2*ω + 2*ω_r) - 4*c_r*c_t**3*t_t**3*cos(2*ω + 2*ω_r) + 21*c_r*c_t**3*t_t*cos(2*ω + 2*ω_r) + 16*c_t**4*t_t**3*cos(2*ω + 2*ω_r) - 28*c_t**4*t_t*cos(2*ω + 2*ω_r)) + 30*ω**2*(8*c_r**4*t_r**3*sin(2*ω_r) - 14*c_r**4*t_r*sin(2*ω_r) - 4*c_r**3*c_t*t_r**3*sin(2*ω_r) - 12*c_r**3*c_t*t_r**2*t_t*sin(2*ω_r) + 21*c_r**3*c_t*t_r*sin(2*ω_r) + 7*c_r**3*c_t*t_t*sin(2*ω_r) + 4*c_r**2*c_t**2*t_r**2*t_t*sin(2*ω_r) - 4*c_r**2*c_t**2*t_r**2*t_t*sin(2*ω + 2*ω_r) + 4*c_r**2*c_t**2*t_r*t_t**2*sin(2*ω_r) - 4*c_r**2*c_t**2*t_r*t_t**2*sin(2*ω + 2*ω_r) - 7*c_r**2*c_t**2*t_r*sin(2*ω_r) + 7*c_r**2*c_t**2*t_r*sin(2*ω + 2*ω_r) - 7*c_r**2*c_t**2*t_t*sin(2*ω_r) + 7*c_r**2*c_t**2*t_t*sin(2*ω + 2*ω_r) + 12*c_r*c_t**3*t_r*t_t**2*sin(2*ω + 2*ω_r) - 7*c_r*c_t**3*t_r*sin(2*ω + 2*ω_r) + 4*c_r*c_t**3*t_t**3*sin(2*ω + 2*ω_r) - 21*c_r*c_t**3*t_t*sin(2*ω + 2*ω_r) - 8*c_t**4*t_t**3*sin(2*ω + 2*ω_r) + 14*c_t**4*t_t*sin(2*ω + 2*ω_r)) + 15*ω*(-16*c_r**4*t_r**3*cos(2*ω_r) + 28*c_r**4*t_r*cos(2*ω_r) + 12*c_r**3*c_t*t_r**3*cos(2*ω_r) + 4*c_r**3*c_t*t_r**3*cos(2*ω + 2*ω_r) + 36*c_r**3*c_t*t_r**2*t_t*cos(2*ω_r) + 12*c_r**3*c_t*t_r**2*t_t*cos(2*ω + 2*ω_r) - 63*c_r**3*c_t*t_r*cos(2*ω_r) - 21*c_r**3*c_t*t_r*cos(2*ω + 2*ω_r) - 21*c_r**3*c_t*t_t*cos(2*ω_r) - 7*c_r**3*c_t*t_t*cos(2*ω + 2*ω_r) - 24*c_r**2*c_t**2*t_r**2*t_t*cos(2*ω_r) - 24*c_r**2*c_t**2*t_r**2*t_t*cos(2*ω + 2*ω_r) - 24*c_r**2*c_t**2*t_r*t_t**2*cos(2*ω_r) - 24*c_r**2*c_t**2*t_r*t_t**2*cos(2*ω + 2*ω_r) + 42*c_r**2*c_t**2*t_r*cos(2*ω_r) + 42*c_r**2*c_t**2*t_r*cos(2*ω + 2*ω_r) + 42*c_r**2*c_t**2*t_t*cos(2*ω_r) + 42*c_r**2*c_t**2*t_t*cos(2*ω + 2*ω_r) + 12*c_r*c_t**3*t_r*t_t**2*cos(2*ω_r) + 36*c_r*c_t**3*t_r*t_t**2*cos(2*ω + 2*ω_r) - 7*c_r*c_t**3*t_r*cos(2*ω_r) - 21*c_r*c_t**3*t_r*cos(2*ω + 2*ω_r) + 4*c_r*c_t**3*t_t**3*cos(2*ω_r) + 12*c_r*c_t**3*t_t**3*cos(2*ω + 2*ω_r) - 21*c_r*c_t**3*t_t*cos(2*ω_r) - 63*c_r*c_t**3*t_t*cos(2*ω + 2*ω_r) - 16*c_t**4*t_t**3*cos(2*ω + 2*ω_r) + 28*c_t**4*t_t*cos(2*ω + 2*ω_r)))/ω**5)/3840, (ω >= -oo) & (ω < oo)), (b/2*p*(32*b/2**2*c_r**2*t_r + 48*b/2**2*c_r*c_t*t_r + 48*b/2**2*c_r*c_t*t_t + 192*b/2**2*c_t**2*t_t + 16*c_r**4*t_r**3*cos(ω_r)**2 - 28*c_r**4*t_r*cos(ω_r)**2 + 28*c_r**4*t_r + 4*c_r**3*c_t*t_r**3*cos(ω_r)**2 + 12*c_r**3*c_t*t_r**2*t_t*cos(ω_r)**2 - 21*c_r**3*c_t*t_r*cos(ω_r)**2 + 21*c_r**3*c_t*t_r - 7*c_r**3*c_t*t_t*cos(ω_r)**2 + 7*c_r**3*c_t*t_t + 8*c_r**2*c_t**2*t_r**2*t_t*cos(ω_r)**2 + 8*c_r**2*c_t**2*t_r*t_t**2*cos(ω_r)**2 - 14*c_r**2*c_t**2*t_r*cos(ω_r)**2 + 14*c_r**2*c_t**2*t_r - 14*c_r**2*c_t**2*t_t*cos(ω_r)**2 + 14*c_r**2*c_t**2*t_t - 320*c_r**2*t_r*y_cg**2 - 320*c_r**2*t_r*z_cg**2 + 12*c_r*c_t**3*t_r*t_t**2*cos(ω_r)**2 - 7*c_r*c_t**3*t_r*cos(ω_r)**2 + 7*c_r*c_t**3*t_r + 4*c_r*c_t**3*t_t**3*cos(ω_r)**2 - 21*c_r*c_t**3*t_t*cos(ω_r)**2 + 21*c_r*c_t**3*t_t - 160*c_r*c_t*t_r*y_cg**2 - 160*c_r*c_t*t_r*z_cg**2 - 160*c_r*c_t*t_t*y_cg**2 - 160*c_r*c_t*t_t*z_cg**2 + 16*c_t**4*t_t**3*cos(ω_r)**2 - 28*c_t**4*t_t*cos(ω_r)**2 + 28*c_t**4*t_t - 320*c_t**2*t_t*y_cg**2 - 320*c_t**2*t_t*z_cg**2)/960, True)) 

# Iyy_cpy  = b/2*p*(32*b/2**2*c_r**2*t_r*tan(Λ_r)**2 + 48*b/2**2*c_r*c_t*t_r*tan(Λ_r)**2 + 48*b/2**2*c_r*c_t*t_t*tan(Λ_r)**2 + 192*b/2**2*c_t**2*t_t*tan(Λ_r)**2 + 24*b/2*c_r**3*t_r*tan(Λ_r) + 32*b/2*c_r**2*c_t*t_r*tan(Λ_r) + 16*b/2*c_r**2*c_t*t_t*tan(Λ_r) + 24*b/2*c_r*c_t**2*t_r*tan(Λ_r) + 48*b/2*c_r*c_t**2*t_t*tan(Λ_r) + 96*b/2*c_t**3*t_t*tan(Λ_r) + 16*c_r**4*t_r**3 + 28*c_r**4*t_r + 4*c_r**3*c_t*t_r**3 + 12*c_r**3*c_t*t_r**2*t_t + 21*c_r**3*c_t*t_r + 7*c_r**3*c_t*t_t + 8*c_r**2*c_t**2*t_r**2*t_t + 8*c_r**2*c_t**2*t_r*t_t**2 + 14*c_r**2*c_t**2*t_r + 14*c_r**2*c_t**2*t_t - 320*c_r**2*t_r*x_cg**2 - 320*c_r**2*t_r*z_cg**2 + 12*c_r*c_t**3*t_r*t_t**2 + 7*c_r*c_t**3*t_r + 4*c_r*c_t**3*t_t**3 + 21*c_r*c_t**3*t_t - 160*c_r*c_t*t_r*x_cg**2 - 160*c_r*c_t*t_r*z_cg**2 - 160*c_r*c_t*t_t*x_cg**2 - 160*c_r*c_t*t_t*z_cg**2 + 16*c_t**4*t_t**3 + 28*c_t**4*t_t - 320*c_t**2*t_t*x_cg**2 - 320*c_t**2*t_t*z_cg**2)/960 

# Izz_cpy  = Piecewise((b/2*p*(128*b/2**2*c_r**2*t_r*tan(Λ_r)**2 + 192*b/2**2*c_r*c_t*t_r*tan(Λ_r)**2 + 192*b/2**2*c_r*c_t*t_t*tan(Λ_r)**2 + 768*b/2**2*c_t**2*t_t*tan(Λ_r)**2 + 96*b/2*c_r**3*t_r*tan(Λ_r) + 128*b/2*c_r**2*c_t*t_r*tan(Λ_r) + 64*b/2*c_r**2*c_t*t_t*tan(Λ_r) + 96*b/2*c_r*c_t**2*t_r*tan(Λ_r) + 192*b/2*c_r*c_t**2*t_t*tan(Λ_r) + 384*b/2*c_t**3*t_t*tan(Λ_r) - 1280*c_r**2*t_r*x_cg**2 - 1280*c_r**2*t_r*y_cg**2 - 640*c_r*c_t*t_r*x_cg**2 - 640*c_r*c_t*t_r*y_cg**2 - 640*c_r*c_t*t_t*x_cg**2 - 640*c_r*c_t*t_t*y_cg**2 - 1280*c_t**2*t_t*x_cg**2 - 1280*c_t**2*t_t*y_cg**2 + (120*c_r**4*t_r**3*sin(2*ω_r) - 120*c_r**4*t_r**3*sin(2*ω + 2*ω_r) - 210*c_r**4*t_r*sin(2*ω_r) + 210*c_r**4*t_r*sin(2*ω + 2*ω_r) - 120*c_r**3*c_t*t_r**3*sin(2*ω_r) + 120*c_r**3*c_t*t_r**3*sin(2*ω + 2*ω_r) - 360*c_r**3*c_t*t_r**2*t_t*sin(2*ω_r) + 360*c_r**3*c_t*t_r**2*t_t*sin(2*ω + 2*ω_r) + 630*c_r**3*c_t*t_r*sin(2*ω_r) - 630*c_r**3*c_t*t_r*sin(2*ω + 2*ω_r) + 210*c_r**3*c_t*t_t*sin(2*ω_r) - 210*c_r**3*c_t*t_t*sin(2*ω + 2*ω_r) + 360*c_r**2*c_t**2*t_r**2*t_t*sin(2*ω_r) - 360*c_r**2*c_t**2*t_r**2*t_t*sin(2*ω + 2*ω_r) + 360*c_r**2*c_t**2*t_r*t_t**2*sin(2*ω_r) - 360*c_r**2*c_t**2*t_r*t_t**2*sin(2*ω + 2*ω_r) - 630*c_r**2*c_t**2*t_r*sin(2*ω_r) + 630*c_r**2*c_t**2*t_r*sin(2*ω + 2*ω_r) - 630*c_r**2*c_t**2*t_t*sin(2*ω_r) + 630*c_r**2*c_t**2*t_t*sin(2*ω + 2*ω_r) - 360*c_r*c_t**3*t_r*t_t**2*sin(2*ω_r) + 360*c_r*c_t**3*t_r*t_t**2*sin(2*ω + 2*ω_r) + 210*c_r*c_t**3*t_r*sin(2*ω_r) - 210*c_r*c_t**3*t_r*sin(2*ω + 2*ω_r) - 120*c_r*c_t**3*t_t**3*sin(2*ω_r) + 120*c_r*c_t**3*t_t**3*sin(2*ω + 2*ω_r) + 630*c_r*c_t**3*t_t*sin(2*ω_r) - 630*c_r*c_t**3*t_t*sin(2*ω + 2*ω_r) + 120*c_t**4*t_t**3*sin(2*ω_r) - 120*c_t**4*t_t**3*sin(2*ω + 2*ω_r) - 210*c_t**4*t_t*sin(2*ω_r) + 210*c_t**4*t_t*sin(2*ω + 2*ω_r) + 2*ω**5*(64*b/2**2*c_r**2*t_r + 96*b/2**2*c_r*c_t*t_r + 96*b/2**2*c_r*c_t*t_t + 384*b/2**2*c_t**2*t_t + 16*c_r**4*t_r**3 + 28*c_r**4*t_r + 4*c_r**3*c_t*t_r**3 + 12*c_r**3*c_t*t_r**2*t_t + 21*c_r**3*c_t*t_r + 7*c_r**3*c_t*t_t + 8*c_r**2*c_t**2*t_r**2*t_t + 8*c_r**2*c_t**2*t_r*t_t**2 + 14*c_r**2*c_t**2*t_r + 14*c_r**2*c_t**2*t_t + 12*c_r*c_t**3*t_r*t_t**2 + 7*c_r*c_t**3*t_r + 4*c_r*c_t**3*t_t**3 + 21*c_r*c_t**3*t_t + 16*c_t**4*t_t**3 + 28*c_t**4*t_t) + 20*ω**4*(4*c_r**4*t_r**3*sin(2*ω_r) - 7*c_r**4*t_r*sin(2*ω_r) - 4*c_t**4*t_t**3*sin(2*ω + 2*ω_r) + 7*c_t**4*t_t*sin(2*ω + 2*ω_r)) + 10*ω**3*(-16*c_r**4*t_r**3*cos(2*ω_r) + 28*c_r**4*t_r*cos(2*ω_r) + 4*c_r**3*c_t*t_r**3*cos(2*ω_r) + 12*c_r**3*c_t*t_r**2*t_t*cos(2*ω_r) - 21*c_r**3*c_t*t_r*cos(2*ω_r) - 7*c_r**3*c_t*t_t*cos(2*ω_r) + 12*c_r*c_t**3*t_r*t_t**2*cos(2*ω + 2*ω_r) - 7*c_r*c_t**3*t_r*cos(2*ω + 2*ω_r) + 4*c_r*c_t**3*t_t**3*cos(2*ω + 2*ω_r) - 21*c_r*c_t**3*t_t*cos(2*ω + 2*ω_r) - 16*c_t**4*t_t**3*cos(2*ω + 2*ω_r) + 28*c_t**4*t_t*cos(2*ω + 2*ω_r)) + 30*ω**2*(-8*c_r**4*t_r**3*sin(2*ω_r) + 14*c_r**4*t_r*sin(2*ω_r) + 4*c_r**3*c_t*t_r**3*sin(2*ω_r) + 12*c_r**3*c_t*t_r**2*t_t*sin(2*ω_r) - 21*c_r**3*c_t*t_r*sin(2*ω_r) - 7*c_r**3*c_t*t_t*sin(2*ω_r) - 4*c_r**2*c_t**2*t_r**2*t_t*sin(2*ω_r) + 4*c_r**2*c_t**2*t_r**2*t_t*sin(2*ω + 2*ω_r) - 4*c_r**2*c_t**2*t_r*t_t**2*sin(2*ω_r) + 4*c_r**2*c_t**2*t_r*t_t**2*sin(2*ω + 2*ω_r) + 7*c_r**2*c_t**2*t_r*sin(2*ω_r) - 7*c_r**2*c_t**2*t_r*sin(2*ω + 2*ω_r) + 7*c_r**2*c_t**2*t_t*sin(2*ω_r) - 7*c_r**2*c_t**2*t_t*sin(2*ω + 2*ω_r) - 12*c_r*c_t**3*t_r*t_t**2*sin(2*ω + 2*ω_r) + 7*c_r*c_t**3*t_r*sin(2*ω + 2*ω_r) - 4*c_r*c_t**3*t_t**3*sin(2*ω + 2*ω_r) + 21*c_r*c_t**3*t_t*sin(2*ω + 2*ω_r) + 8*c_t**4*t_t**3*sin(2*ω + 2*ω_r) - 14*c_t**4*t_t*sin(2*ω + 2*ω_r)) + 15*ω*(16*c_r**4*t_r**3*cos(2*ω_r) - 28*c_r**4*t_r*cos(2*ω_r) - 12*c_r**3*c_t*t_r**3*cos(2*ω_r) - 4*c_r**3*c_t*t_r**3*cos(2*ω + 2*ω_r) - 36*c_r**3*c_t*t_r**2*t_t*cos(2*ω_r) - 12*c_r**3*c_t*t_r**2*t_t*cos(2*ω + 2*ω_r) + 63*c_r**3*c_t*t_r*cos(2*ω_r) + 21*c_r**3*c_t*t_r*cos(2*ω + 2*ω_r) + 21*c_r**3*c_t*t_t*cos(2*ω_r) + 7*c_r**3*c_t*t_t*cos(2*ω + 2*ω_r) + 24*c_r**2*c_t**2*t_r**2*t_t*cos(2*ω_r) + 24*c_r**2*c_t**2*t_r**2*t_t*cos(2*ω + 2*ω_r) + 24*c_r**2*c_t**2*t_r*t_t**2*cos(2*ω_r) + 24*c_r**2*c_t**2*t_r*t_t**2*cos(2*ω + 2*ω_r) - 42*c_r**2*c_t**2*t_r*cos(2*ω_r) - 42*c_r**2*c_t**2*t_r*cos(2*ω + 2*ω_r) - 42*c_r**2*c_t**2*t_t*cos(2*ω_r) - 42*c_r**2*c_t**2*t_t*cos(2*ω + 2*ω_r) - 12*c_r*c_t**3*t_r*t_t**2*cos(2*ω_r) - 36*c_r*c_t**3*t_r*t_t**2*cos(2*ω + 2*ω_r) + 7*c_r*c_t**3*t_r*cos(2*ω_r) + 21*c_r*c_t**3*t_r*cos(2*ω + 2*ω_r) - 4*c_r*c_t**3*t_t**3*cos(2*ω_r) - 12*c_r*c_t**3*t_t**3*cos(2*ω + 2*ω_r) + 21*c_r*c_t**3*t_t*cos(2*ω_r) + 63*c_r*c_t**3*t_t*cos(2*ω + 2*ω_r) + 16*c_t**4*t_t**3*cos(2*ω + 2*ω_r) - 28*c_t**4*t_t*cos(2*ω + 2*ω_r)))/ω**5)/3840, (ω >= -oo) & (ω < oo)), (b/2*p*(32*b/2**2*c_r**2*t_r/cos(Λ_r)**2 + 48*b/2**2*c_r*c_t*t_r/cos(Λ_r)**2 + 48*b/2**2*c_r*c_t*t_t/cos(Λ_r)**2 + 192*b/2**2*c_t**2*t_t/cos(Λ_r)**2 + 24*b/2*c_r**3*t_r*tan(Λ_r) + 32*b/2*c_r**2*c_t*t_r*tan(Λ_r) + 16*b/2*c_r**2*c_t*t_t*tan(Λ_r) + 24*b/2*c_r*c_t**2*t_r*tan(Λ_r) + 48*b/2*c_r*c_t**2*t_t*tan(Λ_r) + 96*b/2*c_t**3*t_t*tan(Λ_r) + 16*c_r**4*t_r**3*sin(ω_r)**2 - 28*c_r**4*t_r*sin(ω_r)**2 + 28*c_r**4*t_r + 4*c_r**3*c_t*t_r**3*sin(ω_r)**2 + 12*c_r**3*c_t*t_r**2*t_t*sin(ω_r)**2 - 21*c_r**3*c_t*t_r*sin(ω_r)**2 + 21*c_r**3*c_t*t_r - 7*c_r**3*c_t*t_t*sin(ω_r)**2 + 7*c_r**3*c_t*t_t + 8*c_r**2*c_t**2*t_r**2*t_t*sin(ω_r)**2 + 8*c_r**2*c_t**2*t_r*t_t**2*sin(ω_r)**2 - 14*c_r**2*c_t**2*t_r*sin(ω_r)**2 + 14*c_r**2*c_t**2*t_r - 14*c_r**2*c_t**2*t_t*sin(ω_r)**2 + 14*c_r**2*c_t**2*t_t - 320*c_r**2*t_r*x_cg**2 - 320*c_r**2*t_r*y_cg**2 + 12*c_r*c_t**3*t_r*t_t**2*sin(ω_r)**2 - 7*c_r*c_t**3*t_r*sin(ω_r)**2 + 7*c_r*c_t**3*t_r + 4*c_r*c_t**3*t_t**3*sin(ω_r)**2 - 21*c_r*c_t**3*t_t*sin(ω_r)**2 + 21*c_r*c_t**3*t_t - 160*c_r*c_t*t_r*x_cg**2 - 160*c_r*c_t*t_r*y_cg**2 - 160*c_r*c_t*t_t*x_cg**2 - 160*c_r*c_t*t_t*y_cg**2 + 16*c_t**4*t_t**3*sin(ω_r)**2 - 28*c_t**4*t_t*sin(ω_r)**2 + 28*c_t**4*t_t - 320*c_t**2*t_t*x_cg**2 - 320*c_t**2*t_t*y_cg**2)/960, True)) 

# Ixy_cpy  = Piecewise((b/2*p*(-2*b/2**2*c_r**2*t_r*tan(Λ_r) - 3*b/2**2*c_r*c_t*t_r*tan(Λ_r) - 3*b/2**2*c_r*c_t*t_t*tan(Λ_r) - 12*b/2**2*c_t**2*t_t*tan(Λ_r) + 15*b/2*(-24*c_r**3*t_r*sin(ω_r) + 24*c_r**3*t_r*sin(ω + ω_r) + 48*c_r**2*c_t*t_r*sin(ω_r) - 48*c_r**2*c_t*t_r*sin(ω + ω_r) + 24*c_r**2*c_t*t_t*sin(ω_r) - 24*c_r**2*c_t*t_t*sin(ω + ω_r) - 24*c_r*c_t**2*t_r*sin(ω_r) + 24*c_r*c_t**2*t_r*sin(ω + ω_r) - 48*c_r*c_t**2*t_t*sin(ω_r) + 48*c_r*c_t**2*t_t*sin(ω + ω_r) - c_t**3*t_t*ω**4*sin(ω + ω_r) + 24*c_t**3*t_t*sin(ω_r) - 24*c_t**3*t_t*sin(ω + ω_r) + ω**3*(c_r**3*t_r*cos(ω_r) + c_r*c_t**2*t_r*cos(ω + ω_r) + 2*c_r*c_t**2*t_t*cos(ω + ω_r) - 4*c_t**3*t_t*cos(ω + ω_r)) + 2*ω**2*(3*c_r**3*t_r*sin(ω_r) - 2*c_r**2*c_t*t_r*sin(ω_r) + 2*c_r**2*c_t*t_r*sin(ω + ω_r) - c_r**2*c_t*t_t*sin(ω_r) + c_r**2*c_t*t_t*sin(ω + ω_r) - 3*c_r*c_t**2*t_r*sin(ω + ω_r) - 6*c_r*c_t**2*t_t*sin(ω + ω_r) + 6*c_t**3*t_t*sin(ω + ω_r)) + 6*ω*(-3*c_r**3*t_r*cos(ω_r) - c_r**3*t_r*cos(ω + ω_r) + 4*c_r**2*c_t*t_r*cos(ω_r) + 4*c_r**2*c_t*t_r*cos(ω + ω_r) + 2*c_r**2*c_t*t_t*cos(ω_r) + 2*c_r**2*c_t*t_t*cos(ω + ω_r) - c_r*c_t**2*t_r*cos(ω_r) - 3*c_r*c_t**2*t_r*cos(ω + ω_r) - 2*c_r*c_t**2*t_t*cos(ω_r) - 6*c_r*c_t**2*t_t*cos(ω + ω_r) + 4*c_t**3*t_t*cos(ω + ω_r)))/ω**5 - 20*c_r**2*t_r*x_cg*y_cg - 10*c_r*c_t*t_r*x_cg*y_cg - 10*c_r*c_t*t_t*x_cg*y_cg - 20*c_t**2*t_t*x_cg*y_cg)/60, (ω >= -oo) & (ω < oo)), (-b/2*p*(8*b/2**2*c_r**2*t_r*tan(Λ_r) + 12*b/2**2*c_r*c_t*t_r*tan(Λ_r) + 12*b/2**2*c_r*c_t*t_t*tan(Λ_r) + 48*b/2**2*c_t**2*t_t*tan(Λ_r) + b/2*(3*c_r**3*t_r + 4*c_r**2*c_t*t_r + 2*c_r**2*c_t*t_t + 3*c_r*c_t**2*t_r + 6*c_r*c_t**2*t_t + 12*c_t**3*t_t)*cos(ω_r) + 80*c_r**2*t_r*x_cg*y_cg + 40*c_r*c_t*t_r*x_cg*y_cg + 40*c_r*c_t*t_t*x_cg*y_cg + 80*c_t**2*t_t*x_cg*y_cg)/240, True)) 

# Ixz_cpy  = Piecewise((b/2*p*(-256*c_r**2*t_r*x_cg*z_cg - 128*c_r*c_t*t_r*x_cg*z_cg - 128*c_r*c_t*t_t*x_cg*z_cg - 256*c_t**2*t_t*x_cg*z_cg + (48*c_r**4*t_r**3*sin(ω_r)**2 - 48*c_r**4*t_r**3*sin(ω + ω_r)**2 - 84*c_r**4*t_r*sin(ω_r)**2 + 84*c_r**4*t_r*sin(ω + ω_r)**2 - 48*c_r**3*c_t*t_r**3*sin(ω_r)**2 + 48*c_r**3*c_t*t_r**3*sin(ω + ω_r)**2 - 144*c_r**3*c_t*t_r**2*t_t*sin(ω_r)**2 + 144*c_r**3*c_t*t_r**2*t_t*sin(ω + ω_r)**2 + 252*c_r**3*c_t*t_r*sin(ω_r)**2 - 252*c_r**3*c_t*t_r*sin(ω + ω_r)**2 + 84*c_r**3*c_t*t_t*sin(ω_r)**2 - 84*c_r**3*c_t*t_t*sin(ω + ω_r)**2 + 144*c_r**2*c_t**2*t_r**2*t_t*sin(ω_r)**2 - 144*c_r**2*c_t**2*t_r**2*t_t*sin(ω + ω_r)**2 + 144*c_r**2*c_t**2*t_r*t_t**2*sin(ω_r)**2 - 144*c_r**2*c_t**2*t_r*t_t**2*sin(ω + ω_r)**2 - 252*c_r**2*c_t**2*t_r*sin(ω_r)**2 + 252*c_r**2*c_t**2*t_r*sin(ω + ω_r)**2 - 252*c_r**2*c_t**2*t_t*sin(ω_r)**2 + 252*c_r**2*c_t**2*t_t*sin(ω + ω_r)**2 - 144*c_r*c_t**3*t_r*t_t**2*sin(ω_r)**2 + 144*c_r*c_t**3*t_r*t_t**2*sin(ω + ω_r)**2 + 84*c_r*c_t**3*t_r*sin(ω_r)**2 - 84*c_r*c_t**3*t_r*sin(ω + ω_r)**2 - 48*c_r*c_t**3*t_t**3*sin(ω_r)**2 + 48*c_r*c_t**3*t_t**3*sin(ω + ω_r)**2 + 252*c_r*c_t**3*t_t*sin(ω_r)**2 - 252*c_r*c_t**3*t_t*sin(ω + ω_r)**2 + 48*c_t**4*t_t**3*sin(ω_r)**2 - 48*c_t**4*t_t**3*sin(ω + ω_r)**2 - 84*c_t**4*t_t*sin(ω_r)**2 + 84*c_t**4*t_t*sin(ω + ω_r)**2 + 4*ω**4*(8*c_r**4*t_r**3*sin(ω_r)**2 - 4*c_r**4*t_r**3*sin(ω + ω_r)**2 - 4*c_r**4*t_r**3*cos(ω + ω_r)**2 - 14*c_r**4*t_r*sin(ω_r)**2 + 7*c_r**4*t_r*sin(ω + ω_r)**2 + 7*c_r**4*t_r*cos(ω + ω_r)**2 - 4*c_t**4*t_t**3*sin(ω + ω_r)**2 + 4*c_t**4*t_t**3*cos(ω + ω_r)**2 + 7*c_t**4*t_t*sin(ω + ω_r)**2 - 7*c_t**4*t_t*cos(ω + ω_r)**2) + 2*ω**3*(-16*c_r**4*t_r**3*sin(2*ω_r) + 28*c_r**4*t_r*sin(2*ω_r) + 4*c_r**3*c_t*t_r**3*sin(2*ω_r) + 12*c_r**3*c_t*t_r**2*t_t*sin(2*ω_r) - 21*c_r**3*c_t*t_r*sin(2*ω_r) - 7*c_r**3*c_t*t_t*sin(2*ω_r) + 12*c_r*c_t**3*t_r*t_t**2*sin(2*ω + 2*ω_r) - 7*c_r*c_t**3*t_r*sin(2*ω + 2*ω_r) + 4*c_r*c_t**3*t_t**3*sin(2*ω + 2*ω_r) - 21*c_r*c_t**3*t_t*sin(2*ω + 2*ω_r) - 16*c_t**4*t_t**3*sin(2*ω + 2*ω_r) + 28*c_t**4*t_t*sin(2*ω + 2*ω_r)) + 6*ω**2*(-16*c_r**4*t_r**3*sin(ω_r)**2 + 8*c_r**4*t_r**3*sin(ω + ω_r)**2 + 8*c_r**4*t_r**3*cos(ω + ω_r)**2 + 28*c_r**4*t_r*sin(ω_r)**2 - 14*c_r**4*t_r*sin(ω + ω_r)**2 - 14*c_r**4*t_r*cos(ω + ω_r)**2 + 8*c_r**3*c_t*t_r**3*sin(ω_r)**2 - 4*c_r**3*c_t*t_r**3*sin(ω + ω_r)**2 - 4*c_r**3*c_t*t_r**3*cos(ω + ω_r)**2 + 24*c_r**3*c_t*t_r**2*t_t*sin(ω_r)**2 - 12*c_r**3*c_t*t_r**2*t_t*sin(ω + ω_r)**2 - 12*c_r**3*c_t*t_r**2*t_t*cos(ω + ω_r)**2 - 42*c_r**3*c_t*t_r*sin(ω_r)**2 + 21*c_r**3*c_t*t_r*sin(ω + ω_r)**2 + 21*c_r**3*c_t*t_r*cos(ω + ω_r)**2 - 14*c_r**3*c_t*t_t*sin(ω_r)**2 + 7*c_r**3*c_t*t_t*sin(ω + ω_r)**2 + 7*c_r**3*c_t*t_t*cos(ω + ω_r)**2 - 8*c_r**2*c_t**2*t_r**2*t_t*sin(ω_r)**2 + 8*c_r**2*c_t**2*t_r**2*t_t*sin(ω + ω_r)**2 - 8*c_r**2*c_t**2*t_r*t_t**2*sin(ω_r)**2 + 8*c_r**2*c_t**2*t_r*t_t**2*sin(ω + ω_r)**2 + 14*c_r**2*c_t**2*t_r*sin(ω_r)**2 - 14*c_r**2*c_t**2*t_r*sin(ω + ω_r)**2 + 14*c_r**2*c_t**2*t_t*sin(ω_r)**2 - 14*c_r**2*c_t**2*t_t*sin(ω + ω_r)**2 - 12*c_r*c_t**3*t_r*t_t**2*sin(ω + ω_r)**2 + 12*c_r*c_t**3*t_r*t_t**2*cos(ω + ω_r)**2 + 7*c_r*c_t**3*t_r*sin(ω + ω_r)**2 - 7*c_r*c_t**3*t_r*cos(ω + ω_r)**2 - 4*c_r*c_t**3*t_t**3*sin(ω + ω_r)**2 + 4*c_r*c_t**3*t_t**3*cos(ω + ω_r)**2 + 21*c_r*c_t**3*t_t*sin(ω + ω_r)**2 - 21*c_r*c_t**3*t_t*cos(ω + ω_r)**2 + 8*c_t**4*t_t**3*sin(ω + ω_r)**2 - 8*c_t**4*t_t**3*cos(ω + ω_r)**2 - 14*c_t**4*t_t*sin(ω + ω_r)**2 + 14*c_t**4*t_t*cos(ω + ω_r)**2) + 3*ω*(16*c_r**4*t_r**3*sin(2*ω_r) - 28*c_r**4*t_r*sin(2*ω_r) - 12*c_r**3*c_t*t_r**3*sin(2*ω_r) - 4*c_r**3*c_t*t_r**3*sin(2*ω + 2*ω_r) - 36*c_r**3*c_t*t_r**2*t_t*sin(2*ω_r) - 12*c_r**3*c_t*t_r**2*t_t*sin(2*ω + 2*ω_r) + 63*c_r**3*c_t*t_r*sin(2*ω_r) + 21*c_r**3*c_t*t_r*sin(2*ω + 2*ω_r) + 21*c_r**3*c_t*t_t*sin(2*ω_r) + 7*c_r**3*c_t*t_t*sin(2*ω + 2*ω_r) + 24*c_r**2*c_t**2*t_r**2*t_t*sin(2*ω_r) + 24*c_r**2*c_t**2*t_r**2*t_t*sin(2*ω + 2*ω_r) + 24*c_r**2*c_t**2*t_r*t_t**2*sin(2*ω_r) + 24*c_r**2*c_t**2*t_r*t_t**2*sin(2*ω + 2*ω_r) - 42*c_r**2*c_t**2*t_r*sin(2*ω_r) - 42*c_r**2*c_t**2*t_r*sin(2*ω + 2*ω_r) - 42*c_r**2*c_t**2*t_t*sin(2*ω_r) - 42*c_r**2*c_t**2*t_t*sin(2*ω + 2*ω_r) - 12*c_r*c_t**3*t_r*t_t**2*sin(2*ω_r) - 36*c_r*c_t**3*t_r*t_t**2*sin(2*ω + 2*ω_r) + 7*c_r*c_t**3*t_r*sin(2*ω_r) + 21*c_r*c_t**3*t_r*sin(2*ω + 2*ω_r) - 4*c_r*c_t**3*t_t**3*sin(2*ω_r) - 12*c_r*c_t**3*t_t**3*sin(2*ω + 2*ω_r) + 21*c_r*c_t**3*t_t*sin(2*ω_r) + 63*c_r*c_t**3*t_t*sin(2*ω + 2*ω_r) + 16*c_t**4*t_t**3*sin(2*ω + 2*ω_r) - 28*c_t**4*t_t*sin(2*ω + 2*ω_r)))/ω**5)/768, (ω >= -oo) & (ω < oo)), (b/2*p*(-640*c_r**2*t_r*x_cg*z_cg - 320*c_r*c_t*t_r*x_cg*z_cg - 320*c_r*c_t*t_t*x_cg*z_cg - 640*c_t**2*t_t*x_cg*z_cg + (-16*c_r**4*t_r**3 + 28*c_r**4*t_r - 4*c_r**3*c_t*t_r**3 - 12*c_r**3*c_t*t_r**2*t_t + 21*c_r**3*c_t*t_r + 7*c_r**3*c_t*t_t - 8*c_r**2*c_t**2*t_r**2*t_t - 8*c_r**2*c_t**2*t_r*t_t**2 + 14*c_r**2*c_t**2*t_r + 14*c_r**2*c_t**2*t_t - 12*c_r*c_t**3*t_r*t_t**2 + 7*c_r*c_t**3*t_r - 4*c_r*c_t**3*t_t**3 + 21*c_r*c_t**3*t_t - 16*c_t**4*t_t**3 + 28*c_t**4*t_t)*sin(2*ω_r))/1920, True)) 

# Iyz_cpy  = Piecewise((b/2*p*(3*b/2*(-24*c_r**3*t_r*cos(ω_r) + 24*c_r**3*t_r*cos(ω + ω_r) + 48*c_r**2*c_t*t_r*cos(ω_r) - 48*c_r**2*c_t*t_r*cos(ω + ω_r) + 24*c_r**2*c_t*t_t*cos(ω_r) - 24*c_r**2*c_t*t_t*cos(ω + ω_r) - 24*c_r*c_t**2*t_r*cos(ω_r) + 24*c_r*c_t**2*t_r*cos(ω + ω_r) - 48*c_r*c_t**2*t_t*cos(ω_r) + 48*c_r*c_t**2*t_t*cos(ω + ω_r) - c_t**3*t_t*ω**4*cos(ω + ω_r) + 24*c_t**3*t_t*cos(ω_r) - 24*c_t**3*t_t*cos(ω + ω_r) + ω**3*(-c_r**3*t_r*sin(ω_r) - c_r*c_t**2*t_r*sin(ω + ω_r) - 2*c_r*c_t**2*t_t*sin(ω + ω_r) + 4*c_t**3*t_t*sin(ω + ω_r)) + 2*ω**2*(3*c_r**3*t_r*cos(ω_r) - 2*c_r**2*c_t*t_r*cos(ω_r) + 2*c_r**2*c_t*t_r*cos(ω + ω_r) - c_r**2*c_t*t_t*cos(ω_r) + c_r**2*c_t*t_t*cos(ω + ω_r) - 3*c_r*c_t**2*t_r*cos(ω + ω_r) - 6*c_r*c_t**2*t_t*cos(ω + ω_r) + 6*c_t**3*t_t*cos(ω + ω_r)) + 6*ω*(3*c_r**3*t_r*sin(ω_r) + c_r**3*t_r*sin(ω + ω_r) - 4*c_r**2*c_t*t_r*sin(ω_r) - 4*c_r**2*c_t*t_r*sin(ω + ω_r) - 2*c_r**2*c_t*t_t*sin(ω_r) - 2*c_r**2*c_t*t_t*sin(ω + ω_r) + c_r*c_t**2*t_r*sin(ω_r) + 3*c_r*c_t**2*t_r*sin(ω + ω_r) + 2*c_r*c_t**2*t_t*sin(ω_r) + 6*c_r*c_t**2*t_t*sin(ω + ω_r) - 4*c_t**3*t_t*sin(ω + ω_r)))/ω**5 - 4*c_r**2*t_r*y_cg*z_cg - 2*c_r*c_t*t_r*y_cg*z_cg - 2*c_r*c_t*t_t*y_cg*z_cg - 4*c_t**2*t_t*y_cg*z_cg)/12, (ω >= -oo) & (ω < oo)), (b/2*p*(b/2*(3*c_r**3*t_r + 4*c_r**2*c_t*t_r + 2*c_r**2*c_t*t_t + 3*c_r*c_t**2*t_r + 6*c_r*c_t**2*t_t + 12*c_t**3*t_t)*sin(ω_r) - 80*c_r**2*t_r*y_cg*z_cg - 40*c_r*c_t*t_r*y_cg*z_cg - 40*c_r*c_t*t_t*y_cg*z_cg - 80*c_t**2*t_t*y_cg*z_cg)/240, True)) 

# Ixx_w0 = b/2*p*(32*b/2**2*c_r**2*t_r + 48*b/2**2*c_r*c_t*t_r + 48*b/2**2*c_r*c_t*t_t + 192*b/2**2*c_t**2*t_t + 16*c_r**4*t_r**3*cos(ω_r)**2 - 28*c_r**4*t_r*cos(ω_r)**2 + 28*c_r**4*t_r + 4*c_r**3*c_t*t_r**3*cos(ω_r)**2 + 12*c_r**3*c_t*t_r**2*t_t*cos(ω_r)**2 - 21*c_r**3*c_t*t_r*cos(ω_r)**2 + 21*c_r**3*c_t*t_r - 7*c_r**3*c_t*t_t*cos(ω_r)**2 + 7*c_r**3*c_t*t_t + 8*c_r**2*c_t**2*t_r**2*t_t*cos(ω_r)**2 + 8*c_r**2*c_t**2*t_r*t_t**2*cos(ω_r)**2 - 14*c_r**2*c_t**2*t_r*cos(ω_r)**2 + 14*c_r**2*c_t**2*t_r - 14*c_r**2*c_t**2*t_t*cos(ω_r)**2 + 14*c_r**2*c_t**2*t_t - 320*c_r**2*t_r*y_cg**2 - 320*c_r**2*t_r*z_cg**2 + 12*c_r*c_t**3*t_r*t_t**2*cos(ω_r)**2 - 7*c_r*c_t**3*t_r*cos(ω_r)**2 + 7*c_r*c_t**3*t_r + 4*c_r*c_t**3*t_t**3*cos(ω_r)**2 - 21*c_r*c_t**3*t_t*cos(ω_r)**2 + 21*c_r*c_t**3*t_t - 160*c_r*c_t*t_r*y_cg**2 - 160*c_r*c_t*t_r*z_cg**2 - 160*c_r*c_t*t_t*y_cg**2 - 160*c_r*c_t*t_t*z_cg**2 + 16*c_t**4*t_t**3*cos(ω_r)**2 - 28*c_t**4*t_t*cos(ω_r)**2 + 28*c_t**4*t_t - 320*c_t**2*t_t*y_cg**2 - 320*c_t**2*t_t*z_cg**2)/960
# Iyy_w0 = b/2*p*(32*b/2**2*c_r**2*t_r*tan(Λ_r)**2 + 48*b/2**2*c_r*c_t*t_r*tan(Λ_r)**2 + 48*b/2**2*c_r*c_t*t_t*tan(Λ_r)**2 + 192*b/2**2*c_t**2*t_t*tan(Λ_r)**2 + 24*b/2*c_r**3*t_r*tan(Λ_r) + 32*b/2*c_r**2*c_t*t_r*tan(Λ_r) + 16*b/2*c_r**2*c_t*t_t*tan(Λ_r) + 24*b/2*c_r*c_t**2*t_r*tan(Λ_r) + 48*b/2*c_r*c_t**2*t_t*tan(Λ_r) + 96*b/2*c_t**3*t_t*tan(Λ_r) + 16*c_r**4*t_r**3 + 28*c_r**4*t_r + 4*c_r**3*c_t*t_r**3 + 12*c_r**3*c_t*t_r**2*t_t + 21*c_r**3*c_t*t_r + 7*c_r**3*c_t*t_t + 8*c_r**2*c_t**2*t_r**2*t_t + 8*c_r**2*c_t**2*t_r*t_t**2 + 14*c_r**2*c_t**2*t_r + 14*c_r**2*c_t**2*t_t - 320*c_r**2*t_r*x_cg**2 - 320*c_r**2*t_r*z_cg**2 + 12*c_r*c_t**3*t_r*t_t**2 + 7*c_r*c_t**3*t_r + 4*c_r*c_t**3*t_t**3 + 21*c_r*c_t**3*t_t - 160*c_r*c_t*t_r*x_cg**2 - 160*c_r*c_t*t_r*z_cg**2 - 160*c_r*c_t*t_t*x_cg**2 - 160*c_r*c_t*t_t*z_cg**2 + 16*c_t**4*t_t**3 + 28*c_t**4*t_t - 320*c_t**2*t_t*x_cg**2 - 320*c_t**2*t_t*z_cg**2)/960
# Izz_w0 = b/2*p*(32*b/2**2*c_r**2*t_r/cos(Λ_r)**2 + 48*b/2**2*c_r*c_t*t_r/cos(Λ_r)**2 + 48*b/2**2*c_r*c_t*t_t/cos(Λ_r)**2 + 192*b/2**2*c_t**2*t_t/cos(Λ_r)**2 + 24*b/2*c_r**3*t_r*tan(Λ_r) + 32*b/2*c_r**2*c_t*t_r*tan(Λ_r) + 16*b/2*c_r**2*c_t*t_t*tan(Λ_r) + 24*b/2*c_r*c_t**2*t_r*tan(Λ_r) + 48*b/2*c_r*c_t**2*t_t*tan(Λ_r) + 96*b/2*c_t**3*t_t*tan(Λ_r) + 16*c_r**4*t_r**3*sin(ω_r)**2 - 28*c_r**4*t_r*sin(ω_r)**2 + 28*c_r**4*t_r + 4*c_r**3*c_t*t_r**3*sin(ω_r)**2 + 12*c_r**3*c_t*t_r**2*t_t*sin(ω_r)**2 - 21*c_r**3*c_t*t_r*sin(ω_r)**2 + 21*c_r**3*c_t*t_r - 7*c_r**3*c_t*t_t*sin(ω_r)**2 + 7*c_r**3*c_t*t_t + 8*c_r**2*c_t**2*t_r**2*t_t*sin(ω_r)**2 + 8*c_r**2*c_t**2*t_r*t_t**2*sin(ω_r)**2 - 14*c_r**2*c_t**2*t_r*sin(ω_r)**2 + 14*c_r**2*c_t**2*t_r - 14*c_r**2*c_t**2*t_t*sin(ω_r)**2 + 14*c_r**2*c_t**2*t_t - 320*c_r**2*t_r*x_cg**2 - 320*c_r**2*t_r*y_cg**2 + 12*c_r*c_t**3*t_r*t_t**2*sin(ω_r)**2 - 7*c_r*c_t**3*t_r*sin(ω_r)**2 + 7*c_r*c_t**3*t_r + 4*c_r*c_t**3*t_t**3*sin(ω_r)**2 - 21*c_r*c_t**3*t_t*sin(ω_r)**2 + 21*c_r*c_t**3*t_t - 160*c_r*c_t*t_r*x_cg**2 - 160*c_r*c_t*t_r*y_cg**2 - 160*c_r*c_t*t_t*x_cg**2 - 160*c_r*c_t*t_t*y_cg**2 + 16*c_t**4*t_t**3*sin(ω_r)**2 - 28*c_t**4*t_t*sin(ω_r)**2 + 28*c_t**4*t_t - 320*c_t**2*t_t*x_cg**2 - 320*c_t**2*t_t*y_cg**2)/960
# Ixy_w0 = b/2*p*(-8*b/2**2*c_r**2*t_r*tan(Λ_r) - 12*b/2**2*c_r*c_t*t_r*tan(Λ_r) - 12*b/2**2*c_r*c_t*t_t*tan(Λ_r) - 48*b/2**2*c_t**2*t_t*tan(Λ_r) + 3*b/2*c_r**3*t_r*cos(ω_r) + 4*b/2*c_r**2*c_t*t_r*cos(ω_r) + 2*b/2*c_r**2*c_t*t_t*cos(ω_r) + 3*b/2*c_r*c_t**2*t_r*cos(ω_r) + 6*b/2*c_r*c_t**2*t_t*cos(ω_r) + 12*b/2*c_t**3*t_t*cos(ω_r) - 80*c_r**2*t_r*x_cg*y_cg - 40*c_r*c_t*t_r*x_cg*y_cg - 40*c_r*c_t*t_t*x_cg*y_cg - 80*c_t**2*t_t*x_cg*y_cg)/240
# Ixz_w0 = b/2*p*(-16*c_r**4*t_r**3*sin(2*ω_r) + 28*c_r**4*t_r*sin(2*ω_r) - 4*c_r**3*c_t*t_r**3*sin(2*ω_r) - 12*c_r**3*c_t*t_r**2*t_t*sin(2*ω_r) + 21*c_r**3*c_t*t_r*sin(2*ω_r) + 7*c_r**3*c_t*t_t*sin(2*ω_r) - 8*c_r**2*c_t**2*t_r**2*t_t*sin(2*ω_r) - 8*c_r**2*c_t**2*t_r*t_t**2*sin(2*ω_r) + 14*c_r**2*c_t**2*t_r*sin(2*ω_r) + 14*c_r**2*c_t**2*t_t*sin(2*ω_r) - 640*c_r**2*t_r*x_cg*z_cg - 12*c_r*c_t**3*t_r*t_t**2*sin(2*ω_r) + 7*c_r*c_t**3*t_r*sin(2*ω_r) - 4*c_r*c_t**3*t_t**3*sin(2*ω_r) + 21*c_r*c_t**3*t_t*sin(2*ω_r) - 320*c_r*c_t*t_r*x_cg*z_cg - 320*c_r*c_t*t_t*x_cg*z_cg - 16*c_t**4*t_t**3*sin(2*ω_r) + 28*c_t**4*t_t*sin(2*ω_r) - 640*c_t**2*t_t*x_cg*z_cg)/1920
# Iyz_w0 = -b/2*p*(3*b/2*c_r**3*t_r*sin(ω_r) + 4*b/2*c_r**2*c_t*t_r*sin(ω_r) + 2*b/2*c_r**2*c_t*t_t*sin(ω_r) + 3*b/2*c_r*c_t**2*t_r*sin(ω_r) + 6*b/2*c_r*c_t**2*t_t*sin(ω_r) + 12*b/2*c_t**3*t_t*sin(ω_r) + 80*c_r**2*t_r*y_cg*z_cg + 40*c_r*c_t*t_r*y_cg*z_cg + 40*c_r*c_t*t_t*y_cg*z_cg + 80*c_t**2*t_t*y_cg*z_cg)/240

Ixx_cp1 = 0.272124422825884
Iyy_cp1 = 0.0312129806676198
Izz_cp1 = 0.299776791197862
Ixy_cp1 = -0.068469107042954 # SEE THE SIGN CHANGES HERE!!!
Ixz_cp1 = -0.00396349754460123
Iyz_cp1 = -0.00144473643314478 # SEE THE SIGN CHANGES HERE!!!

Ixx_lef = 0.272124422825884
Iyy_lef = 0.0312129806676198
Izz_lef = 0.299776791197862
Ixy_lef = 0.068469107042954 # SEE THE SIGN CHANGES HERE!!!
Ixz_lef = -0.00396349754460123
Iyz_lef = 0.00144473643314478 # SEE THE SIGN CHANGES HERE!!!

# print("Ixx_cpy  =", Ixx_cpy)
# print("Iyy_cpy  =", Iyy_cpy)
# print("Izz_cpy  =", Izz_cpy)
# print("Ixy_cpy  =", Ixy_cpy)
# print("Ixz_cpy  =", Ixz_cpy)
# print("Iyz_cpy  =", Iyz_cpy)

# print("Ixx_w0   =", Ixx_w0, "\n")
# print("Iyy_w0   =", Iyy_w0, "\n")
# print("Izz_w0   =", Izz_w0, "\n")
# print("Ixy_w0   =", Ixy_w0, "\n")
# print("Ixz_w0   =", Ixz_w0, "\n")
# print("Iyz_w0   =", Iyz_w0, "\n")

# print("Ixx_cp1 =", Ixx_cp1)
# print("Iyy_cp1 =", Iyy_cp1)
# print("Izz_cp1 =", Izz_cp1)
# print("Ixy_cp1 =", Ixy_cp1)
# print("Ixz_cp1 =", Ixz_cp1)
# print("Iyz_cp1 =", Iyz_cp1)
# print()
# print("Ixx % diff =", (Ixx_cpy - Ixx_cp1)/Ixx_cp1 * 100.0)
# print("Iyy % diff =", (Iyy_cpy - Iyy_cp1)/Iyy_cp1 * 100.0)
# print("Izz % diff =", (Izz_cpy - Izz_cp1)/Izz_cp1 * 100.0)
# print("Ixy % diff =", (Ixy_cpy - Ixy_cp1)/Ixy_cp1 * 100.0)
# print("Ixz % diff =", (Ixz_cpy - Ixz_cp1)/Ixz_cp1 * 100.0)
# print("Iyz % diff =", (Iyz_cpy - Iyz_cp1)/Iyz_cp1 * 100.0)



# ################ just mounting angle
# declaring variables...
# creating bounds...
# integrating...
#          mass...
#          moments...
#          sub inertias...
#          full inertias...
#                  Ixx...
#                  Iyy...
#                  Izz...
#                  Ixy...
#                  Ixz...
#                  Iyz...
# simplifying...
#          mass and moments...
#          moments of inertia...
#          products of inertia...
# reporting...


# m = b/2*k_a*p/6

# Myz = -b/2*p*(4*b/2*c_r**2*t_r*tan(Λ_r) + 4*b/2*c_r*c_t*t_r*tan(Λ_r) + 4*b/2*c_r*c_t*t_t*tan(Λ_r) + 12*b/2*c_t**2*t_t*tan(Λ_r) + 3*c_r**3*t_r + 2*c_r**2*c_t*t_r + c_r**2*c_t*t_t + c_r*c_t**2*t_r + 2*c_r*c_t**2*t_t + 3*c_t**3*t_t)/48

# Mxz = b/2**2*p*(c_r**2*t_r + c_r*c_t*t_r + c_r*c_t*t_t + 3*c_t**2*t_t)/12

# Mxy = 0

# Ixx_new = b/2*p*(32*b/2**2*c_r**2*t_r + 48*b/2**2*c_r*c_t*t_r + 48*b/2**2*c_r*c_t*t_t + 192*b/2**2*c_t**2*t_t + 16*c_r**4*t_r**3*cos(ω_r)**2 - 28*c_r**4*t_r*cos(ω_r)**2 + 28*c_r**4*t_r + 4*c_r**3*c_t*t_r**3*cos(ω_r)**2 + 12*c_r**3*c_t*t_r**2*t_t*cos(ω_r)**2 - 21*c_r**3*c_t*t_r*cos(ω_r)**2 + 21*c_r**3*c_t*t_r - 7*c_r**3*c_t*t_t*cos(ω_r)**2 + 7*c_r**3*c_t*t_t + 8*c_r**2*c_t**2*t_r**2*t_t*cos(ω_r)**2 + 8*c_r**2*c_t**2*t_r*t_t**2*cos(ω_r)**2 - 14*c_r**2*c_t**2*t_r*cos(ω_r)**2 + 14*c_r**2*c_t**2*t_r - 14*c_r**2*c_t**2*t_t*cos(ω_r)**2 + 14*c_r**2*c_t**2*t_t - 320*c_r**2*t_r*y_cg**2 - 320*c_r**2*t_r*z_cg**2 + 12*c_r*c_t**3*t_r*t_t**2*cos(ω_r)**2 - 7*c_r*c_t**3*t_r*cos(ω_r)**2 + 7*c_r*c_t**3*t_r + 4*c_r*c_t**3*t_t**3*cos(ω_r)**2 - 21*c_r*c_t**3*t_t*cos(ω_r)**2 + 21*c_r*c_t**3*t_t - 160*c_r*c_t*t_r*y_cg**2 - 160*c_r*c_t*t_r*z_cg**2 - 160*c_r*c_t*t_t*y_cg**2 - 160*c_r*c_t*t_t*z_cg**2 + 16*c_t**4*t_t**3*cos(ω_r)**2 - 28*c_t**4*t_t*cos(ω_r)**2 + 28*c_t**4*t_t - 320*c_t**2*t_t*y_cg**2 - 320*c_t**2*t_t*z_cg**2)/960
# Iyy_new = b/2*p*(32*b/2**2*c_r**2*t_r*tan(Λ_r)**2 + 48*b/2**2*c_r*c_t*t_r*tan(Λ_r)**2 + 48*b/2**2*c_r*c_t*t_t*tan(Λ_r)**2 + 192*b/2**2*c_t**2*t_t*tan(Λ_r)**2 + 24*b/2*c_r**3*t_r*tan(Λ_r) + 32*b/2*c_r**2*c_t*t_r*tan(Λ_r) + 16*b/2*c_r**2*c_t*t_t*tan(Λ_r) + 24*b/2*c_r*c_t**2*t_r*tan(Λ_r) + 48*b/2*c_r*c_t**2*t_t*tan(Λ_r) + 96*b/2*c_t**3*t_t*tan(Λ_r) + 16*c_r**4*t_r**3 + 28*c_r**4*t_r + 4*c_r**3*c_t*t_r**3 + 12*c_r**3*c_t*t_r**2*t_t + 21*c_r**3*c_t*t_r + 7*c_r**3*c_t*t_t + 8*c_r**2*c_t**2*t_r**2*t_t + 8*c_r**2*c_t**2*t_r*t_t**2 + 14*c_r**2*c_t**2*t_r + 14*c_r**2*c_t**2*t_t - 320*c_r**2*t_r*x_cg**2 - 320*c_r**2*t_r*z_cg**2 + 12*c_r*c_t**3*t_r*t_t**2 + 7*c_r*c_t**3*t_r + 4*c_r*c_t**3*t_t**3 + 21*c_r*c_t**3*t_t - 160*c_r*c_t*t_r*x_cg**2 - 160*c_r*c_t*t_r*z_cg**2 - 160*c_r*c_t*t_t*x_cg**2 - 160*c_r*c_t*t_t*z_cg**2 + 16*c_t**4*t_t**3 + 28*c_t**4*t_t - 320*c_t**2*t_t*x_cg**2 - 320*c_t**2*t_t*z_cg**2)/960
# Izz_new = b/2*p*(32*b/2**2*c_r**2*t_r/cos(Λ_r)**2 + 48*b/2**2*c_r*c_t*t_r/cos(Λ_r)**2 + 48*b/2**2*c_r*c_t*t_t/cos(Λ_r)**2 + 192*b/2**2*c_t**2*t_t/cos(Λ_r)**2 + 24*b/2*c_r**3*t_r*tan(Λ_r) + 32*b/2*c_r**2*c_t*t_r*tan(Λ_r) + 16*b/2*c_r**2*c_t*t_t*tan(Λ_r) + 24*b/2*c_r*c_t**2*t_r*tan(Λ_r) + 48*b/2*c_r*c_t**2*t_t*tan(Λ_r) + 96*b/2*c_t**3*t_t*tan(Λ_r) + 16*c_r**4*t_r**3*sin(ω_r)**2 - 28*c_r**4*t_r*sin(ω_r)**2 + 28*c_r**4*t_r + 4*c_r**3*c_t*t_r**3*sin(ω_r)**2 + 12*c_r**3*c_t*t_r**2*t_t*sin(ω_r)**2 - 21*c_r**3*c_t*t_r*sin(ω_r)**2 + 21*c_r**3*c_t*t_r - 7*c_r**3*c_t*t_t*sin(ω_r)**2 + 7*c_r**3*c_t*t_t + 8*c_r**2*c_t**2*t_r**2*t_t*sin(ω_r)**2 + 8*c_r**2*c_t**2*t_r*t_t**2*sin(ω_r)**2 - 14*c_r**2*c_t**2*t_r*sin(ω_r)**2 + 14*c_r**2*c_t**2*t_r - 14*c_r**2*c_t**2*t_t*sin(ω_r)**2 + 14*c_r**2*c_t**2*t_t - 320*c_r**2*t_r*x_cg**2 - 320*c_r**2*t_r*y_cg**2 + 12*c_r*c_t**3*t_r*t_t**2*sin(ω_r)**2 - 7*c_r*c_t**3*t_r*sin(ω_r)**2 + 7*c_r*c_t**3*t_r + 4*c_r*c_t**3*t_t**3*sin(ω_r)**2 - 21*c_r*c_t**3*t_t*sin(ω_r)**2 + 21*c_r*c_t**3*t_t - 160*c_r*c_t*t_r*x_cg**2 - 160*c_r*c_t*t_r*y_cg**2 - 160*c_r*c_t*t_t*x_cg**2 - 160*c_r*c_t*t_t*y_cg**2 + 16*c_t**4*t_t**3*sin(ω_r)**2 - 28*c_t**4*t_t*sin(ω_r)**2 + 28*c_t**4*t_t - 320*c_t**2*t_t*x_cg**2 - 320*c_t**2*t_t*y_cg**2)/960
# Ixy_new = b/2*p*(-8*b/2**2*c_r**2*t_r*tan(Λ_r) - 12*b/2**2*c_r*c_t*t_r*tan(Λ_r) - 12*b/2**2*c_r*c_t*t_t*tan(Λ_r) - 48*b/2**2*c_t**2*t_t*tan(Λ_r) + 3*b/2*c_r**3*t_r*cos(ω_r) + 4*b/2*c_r**2*c_t*t_r*cos(ω_r) + 2*b/2*c_r**2*c_t*t_t*cos(ω_r) + 3*b/2*c_r*c_t**2*t_r*cos(ω_r) + 6*b/2*c_r*c_t**2*t_t*cos(ω_r) + 12*b/2*c_t**3*t_t*cos(ω_r) - 80*c_r**2*t_r*x_cg*y_cg - 40*c_r*c_t*t_r*x_cg*y_cg - 40*c_r*c_t*t_t*x_cg*y_cg - 80*c_t**2*t_t*x_cg*y_cg)/240
# Ixz_new = b/2*p*(-16*c_r**4*t_r**3*sin(2*ω_r) + 28*c_r**4*t_r*sin(2*ω_r) - 4*c_r**3*c_t*t_r**3*sin(2*ω_r) - 12*c_r**3*c_t*t_r**2*t_t*sin(2*ω_r) + 21*c_r**3*c_t*t_r*sin(2*ω_r) + 7*c_r**3*c_t*t_t*sin(2*ω_r) - 8*c_r**2*c_t**2*t_r**2*t_t*sin(2*ω_r) - 8*c_r**2*c_t**2*t_r*t_t**2*sin(2*ω_r) + 14*c_r**2*c_t**2*t_r*sin(2*ω_r) + 14*c_r**2*c_t**2*t_t*sin(2*ω_r) - 640*c_r**2*t_r*x_cg*z_cg - 12*c_r*c_t**3*t_r*t_t**2*sin(2*ω_r) + 7*c_r*c_t**3*t_r*sin(2*ω_r) - 4*c_r*c_t**3*t_t**3*sin(2*ω_r) + 21*c_r*c_t**3*t_t*sin(2*ω_r) - 320*c_r*c_t*t_r*x_cg*z_cg - 320*c_r*c_t*t_t*x_cg*z_cg - 16*c_t**4*t_t**3*sin(2*ω_r) + 28*c_t**4*t_t*sin(2*ω_r) - 640*c_t**2*t_t*x_cg*z_cg)/1920
# Iyz_new = -b/2*p*(3*b/2*c_r**3*t_r*sin(ω_r) + 4*b/2*c_r**2*c_t*t_r*sin(ω_r) + 2*b/2*c_r**2*c_t*t_t*sin(ω_r) + 3*b/2*c_r*c_t**2*t_r*sin(ω_r) + 6*b/2*c_r*c_t**2*t_t*sin(ω_r) + 12*b/2*c_t**3*t_t*sin(ω_r) + 80*c_r**2*t_r*y_cg*z_cg + 40*c_r*c_t*t_r*y_cg*z_cg + 40*c_r*c_t*t_t*y_cg*z_cg + 80*c_t**2*t_t*y_cg*z_cg)/240


# # replacement variables
# b_2 = 8.0
# cr = 2.0
# ct = 1.50
# tr = tt = 0.12
# Lr = np.deg2rad(15.0)
# p = 0.0175
# tanL = sy.tan(Lr)
# wr = np.deg2rad(20.0)
# w = np.deg2rad(18.0)
# xcg = -1.38708173
# ycg = 3.62162162
# zcg = 0.15165589

# # reformatted coefficients, and some changed
ka = tr*cr*(2*cr+ct) + tt*ct*(cr+2*ct)
kb = tr*cr*(cr+ct) + tt*ct*(cr+3*ct)
kc = tr*cr*(3*cr**2+2*cr*ct+ct**2) + tt*ct*(cr**2+2*cr*ct+3*ct**2)
kd1 = tr*cr*(2*cr+3*ct) + tt*ct*(3*cr+12*ct)
ke = tr*cr*(3*cr**2+4*cr*ct+3*ct**2) + 2*tt*ct*(cr**2+3*cr*ct+6*ct**2)
kf1 = tr*cr*(4*cr**3+3*cr**2*ct+2*cr*ct**2+ct**3) + \
    tt*ct*(cr**3+2*cr**2*ct+3*cr*ct**2+4*ct**3)
kg = tr**3*cr**3*(4*cr+ct) + tr**2*cr**2*tt*ct*(3*cr+2*ct) + \
    tr*cr*tt**2*ct**2*(2*cr+3*ct) + tt**3*ct**3*(cr+4*ct)
m = b_2*ka*p/6
minv = 6/b_2/ka/p

# simplifying equations
Ixx_new = m * ( 1/160 * (16*b_2**2*kd1 + sy.cos(wr)**2*(4*kg - 7*kf1) + 7*kf1 )/ka - ycg**2 - zcg**2 )
Iyy_new = m * ( 1/160 * (4*b_2*(b_2*sy.tan(Lr)**2*kd1 + 2*sy.tan(Lr)*ke) + 4*kg + 7*kf1 )/ka  - xcg**2 - zcg**2)
Izz_new = m * ( 1/160 * (4*b_2*(b_2*(sy.tan(Lr)**2 + 1)*kd1 + 2*sy.tan(Lr)*ke) + sy.sin(wr)**2*(4*kg - 7*kf1) + 7*kf1)/ka - xcg**2 - ycg**2 )
Ixy_new =-m * ( 1/ 40 * b_2*(4*b_2*kd1*sy.tan(Lr) - ke*sy.cos(wr) )/ka + xcg*ycg ) # test out left twist wing
# add delta function
Ixz_new =-m * ( 1/320 * (4*kg*sy.sin(2*wr) - 7*kf1*sy.sin(2*wr))/ka + xcg*zcg )
Iyz_new =-m * ( 1/ 40 * ( b_2*ke*sy.sin(wr) )/ka + ycg*zcg )


for i in range(len(names)):
    Ixxs[i,0] = Ixx_new.subs(vals[i]).subs(xcg,xcgs[i,0]).subs(ycg,\
        ycgs[i,0]).subs(zcg,zcgs[i,0])
    Iyys[i,0] = Iyy_new.subs(vals[i]).subs(xcg,xcgs[i,0]).subs(ycg,\
        ycgs[i,0]).subs(zcg,zcgs[i,0])
    Izzs[i,0] = Izz_new.subs(vals[i]).subs(xcg,xcgs[i,0]).subs(ycg,\
        ycgs[i,0]).subs(zcg,zcgs[i,0])
    Ixys[i,0] = Ixy_new.subs(vals[i]).subs(xcg,xcgs[i,0]).subs(ycg,\
        ycgs[i,0]).subs(zcg,zcgs[i,0])
    Ixzs[i,0] = Ixz_new.subs(vals[i]).subs(xcg,xcgs[i,0]).subs(ycg,\
        ycgs[i,0]).subs(zcg,zcgs[i,0])
    Iyzs[i,0] = Iyz_new.subs(vals[i]).subs(xcg,xcgs[i,0]).subs(ycg,\
        ycgs[i,0]).subs(zcg,zcgs[i,0])
    
    # percent difference
    if Ixxs[i,1] != 0.0:
        Ixxs[i,2] = (Ixxs[i,1]-Ixxs[i,0]) / Ixxs[i,1] * 100.0
    if Iyys[i,1] != 0.0:
        Iyys[i,2] = (Iyys[i,1]-Iyys[i,0]) / Iyys[i,1] * 100.0
    if Izzs[i,1] != 0.0:
        Izzs[i,2] = (Izzs[i,1]-Izzs[i,0]) / Izzs[i,1] * 100.0
    if Ixys[i,1] != 0.0:
        Ixys[i,2] = (Ixys[i,1]-Ixys[i,0]) / Ixys[i,1] * 100.0
    if Ixzs[i,1] != 0.0:
        Ixzs[i,2] = (Ixzs[i,1]-Ixzs[i,0]) / Ixzs[i,1] * 100.0
    if Iyzs[i,1] != 0.0:
        Iyzs[i,2] = (Iyzs[i,1]-Iyzs[i,0]) / Iyzs[i,1] * 100.0

print()
print_table("Ixx",names,types,Ixxs)
print_table("Iyy",names,types,Iyys)
print_table("Izz",names,types,Izzs)
print_table("Ixy",names,types,Ixys)
print_table("Ixz",names,types,Ixzs)
print_table("Iyz",names,types,Iyzs)





print()
print("Ixx_new =", Ixx_new)
print("Iyy_new =", Iyy_new)
print("Izz_new =", Izz_new)
print("Ixy_new =", Ixy_new)
print("Ixz_new =", Ixz_new)
print("Iyz_new =", Iyz_new)
# print()
# print("Ixx % diff =", (Ixx_new - Ixx_cp1)/Ixx_cp1 * 100.0)
# print("Iyy % diff =", (Iyy_new - Iyy_cp1)/Iyy_cp1 * 100.0)
# print("Izz % diff =", (Izz_new - Izz_cp1)/Izz_cp1 * 100.0)
# print("Ixy % diff =", (Ixy_new - Ixy_cp1)/Ixy_cp1 * 100.0)
# print("Ixz % diff =", (Ixz_new - Ixz_cp1)/Ixz_cp1 * 100.0)
# print("Iyz % diff =", (Iyz_new - Iyz_cp1)/Iyz_cp1 * 100.0)


##### 1 + tan^2x = sec^2x #####
# ############## twist and mounting angle
# declaring variables...
# creating bounds...
# integrating...
# 	 mass...
# 	 moments...
# 	 sub inertias...
# 	 full inertias...
# 		 Ixx...
# 		 Iyy...
# 		 Izz...
# 		 Ixy...
# 		 Ixz...
# 		 Iyz...
# simplifying...
# 	 mass and moments...
# 	 moments of inertia...
# 	 products of inertia...
# reporting...


# m = b/2*k_a*p/6 

# Myz = -b/2*p*(4*b/2*c_r**2*t_r*tan(Λ_r) + 4*b/2*c_r*c_t*t_r*tan(Λ_r) + 4*b/2*c_r*c_t*t_t*tan(Λ_r) + 12*b/2*c_t**2*t_t*tan(Λ_r) + 3*c_r**3*t_r + 2*c_r**2*c_t*t_r + c_r**2*c_t*t_t + c_r*c_t**2*t_r + 2*c_r*c_t**2*t_t + 3*c_t**3*t_t)/48 

# Mxz = b/2**2*p*(c_r**2*t_r + c_r*c_t*t_r + c_r*c_t*t_t + 3*c_t**2*t_t)/12 

# Mxy = 0 

# Ixx_new = Piecewise((b/2*p*(-1280*c_r**2*t_r*y_cg**2 - 1280*c_r**2*t_r*z_cg**2 - 640*c_r*c_t*t_r*y_cg**2 - 640*c_r*c_t*t_r*z_cg**2 - 640*c_r*c_t*t_t*y_cg**2 - 640*c_r*c_t*t_t*z_cg**2 - 1280*c_t**2*t_t*y_cg**2 - 1280*c_t**2*t_t*z_cg**2 + (-120*c_r**4*t_r**3*sin(2*ω_r) + 120*c_r**4*t_r**3*sin(2*ω + 2*ω_r) + 210*c_r**4*t_r*sin(2*ω_r) - 210*c_r**4*t_r*sin(2*ω + 2*ω_r) + 120*c_r**3*c_t*t_r**3*sin(2*ω_r) - 120*c_r**3*c_t*t_r**3*sin(2*ω + 2*ω_r) + 360*c_r**3*c_t*t_r**2*t_t*sin(2*ω_r) - 360*c_r**3*c_t*t_r**2*t_t*sin(2*ω + 2*ω_r) - 630*c_r**3*c_t*t_r*sin(2*ω_r) + 630*c_r**3*c_t*t_r*sin(2*ω + 2*ω_r) - 210*c_r**3*c_t*t_t*sin(2*ω_r) + 210*c_r**3*c_t*t_t*sin(2*ω + 2*ω_r) - 360*c_r**2*c_t**2*t_r**2*t_t*sin(2*ω_r) + 360*c_r**2*c_t**2*t_r**2*t_t*sin(2*ω + 2*ω_r) - 360*c_r**2*c_t**2*t_r*t_t**2*sin(2*ω_r) + 360*c_r**2*c_t**2*t_r*t_t**2*sin(2*ω + 2*ω_r) + 630*c_r**2*c_t**2*t_r*sin(2*ω_r) - 630*c_r**2*c_t**2*t_r*sin(2*ω + 2*ω_r) + 630*c_r**2*c_t**2*t_t*sin(2*ω_r) - 630*c_r**2*c_t**2*t_t*sin(2*ω + 2*ω_r) + 360*c_r*c_t**3*t_r*t_t**2*sin(2*ω_r) - 360*c_r*c_t**3*t_r*t_t**2*sin(2*ω + 2*ω_r) - 210*c_r*c_t**3*t_r*sin(2*ω_r) + 210*c_r*c_t**3*t_r*sin(2*ω + 2*ω_r) + 120*c_r*c_t**3*t_t**3*sin(2*ω_r) - 120*c_r*c_t**3*t_t**3*sin(2*ω + 2*ω_r) - 630*c_r*c_t**3*t_t*sin(2*ω_r) + 630*c_r*c_t**3*t_t*sin(2*ω + 2*ω_r) - 120*c_t**4*t_t**3*sin(2*ω_r) + 120*c_t**4*t_t**3*sin(2*ω + 2*ω_r) + 210*c_t**4*t_t*sin(2*ω_r) - 210*c_t**4*t_t*sin(2*ω + 2*ω_r) + 2*ω**5*(64*b/2**2*c_r**2*t_r + 96*b/2**2*c_r*c_t*t_r + 96*b/2**2*c_r*c_t*t_t + 384*b/2**2*c_t**2*t_t + 16*c_r**4*t_r**3 + 28*c_r**4*t_r + 4*c_r**3*c_t*t_r**3 + 12*c_r**3*c_t*t_r**2*t_t + 21*c_r**3*c_t*t_r + 7*c_r**3*c_t*t_t + 8*c_r**2*c_t**2*t_r**2*t_t + 8*c_r**2*c_t**2*t_r*t_t**2 + 14*c_r**2*c_t**2*t_r + 14*c_r**2*c_t**2*t_t + 12*c_r*c_t**3*t_r*t_t**2 + 7*c_r*c_t**3*t_r + 4*c_r*c_t**3*t_t**3 + 21*c_r*c_t**3*t_t + 16*c_t**4*t_t**3 + 28*c_t**4*t_t) + 20*ω**4*(-4*c_r**4*t_r**3*sin(2*ω_r) + 7*c_r**4*t_r*sin(2*ω_r) + 4*c_t**4*t_t**3*sin(2*ω + 2*ω_r) - 7*c_t**4*t_t*sin(2*ω + 2*ω_r)) + 10*ω**3*(16*c_r**4*t_r**3*cos(2*ω_r) - 28*c_r**4*t_r*cos(2*ω_r) - 4*c_r**3*c_t*t_r**3*cos(2*ω_r) - 12*c_r**3*c_t*t_r**2*t_t*cos(2*ω_r) + 21*c_r**3*c_t*t_r*cos(2*ω_r) + 7*c_r**3*c_t*t_t*cos(2*ω_r) - 12*c_r*c_t**3*t_r*t_t**2*cos(2*ω + 2*ω_r) + 7*c_r*c_t**3*t_r*cos(2*ω + 2*ω_r) - 4*c_r*c_t**3*t_t**3*cos(2*ω + 2*ω_r) + 21*c_r*c_t**3*t_t*cos(2*ω + 2*ω_r) + 16*c_t**4*t_t**3*cos(2*ω + 2*ω_r) - 28*c_t**4*t_t*cos(2*ω + 2*ω_r)) + 30*ω**2*(8*c_r**4*t_r**3*sin(2*ω_r) - 14*c_r**4*t_r*sin(2*ω_r) - 4*c_r**3*c_t*t_r**3*sin(2*ω_r) - 12*c_r**3*c_t*t_r**2*t_t*sin(2*ω_r) + 21*c_r**3*c_t*t_r*sin(2*ω_r) + 7*c_r**3*c_t*t_t*sin(2*ω_r) + 4*c_r**2*c_t**2*t_r**2*t_t*sin(2*ω_r) - 4*c_r**2*c_t**2*t_r**2*t_t*sin(2*ω + 2*ω_r) + 4*c_r**2*c_t**2*t_r*t_t**2*sin(2*ω_r) - 4*c_r**2*c_t**2*t_r*t_t**2*sin(2*ω + 2*ω_r) - 7*c_r**2*c_t**2*t_r*sin(2*ω_r) + 7*c_r**2*c_t**2*t_r*sin(2*ω + 2*ω_r) - 7*c_r**2*c_t**2*t_t*sin(2*ω_r) + 7*c_r**2*c_t**2*t_t*sin(2*ω + 2*ω_r) + 12*c_r*c_t**3*t_r*t_t**2*sin(2*ω + 2*ω_r) - 7*c_r*c_t**3*t_r*sin(2*ω + 2*ω_r) + 4*c_r*c_t**3*t_t**3*sin(2*ω + 2*ω_r) - 21*c_r*c_t**3*t_t*sin(2*ω + 2*ω_r) - 8*c_t**4*t_t**3*sin(2*ω + 2*ω_r) + 14*c_t**4*t_t*sin(2*ω + 2*ω_r)) + 15*ω*(-16*c_r**4*t_r**3*cos(2*ω_r) + 28*c_r**4*t_r*cos(2*ω_r) + 12*c_r**3*c_t*t_r**3*cos(2*ω_r) + 4*c_r**3*c_t*t_r**3*cos(2*ω + 2*ω_r) + 36*c_r**3*c_t*t_r**2*t_t*cos(2*ω_r) + 12*c_r**3*c_t*t_r**2*t_t*cos(2*ω + 2*ω_r) - 63*c_r**3*c_t*t_r*cos(2*ω_r) - 21*c_r**3*c_t*t_r*cos(2*ω + 2*ω_r) - 21*c_r**3*c_t*t_t*cos(2*ω_r) - 7*c_r**3*c_t*t_t*cos(2*ω + 2*ω_r) - 24*c_r**2*c_t**2*t_r**2*t_t*cos(2*ω_r) - 24*c_r**2*c_t**2*t_r**2*t_t*cos(2*ω + 2*ω_r) - 24*c_r**2*c_t**2*t_r*t_t**2*cos(2*ω_r) - 24*c_r**2*c_t**2*t_r*t_t**2*cos(2*ω + 2*ω_r) + 42*c_r**2*c_t**2*t_r*cos(2*ω_r) + 42*c_r**2*c_t**2*t_r*cos(2*ω + 2*ω_r) + 42*c_r**2*c_t**2*t_t*cos(2*ω_r) + 42*c_r**2*c_t**2*t_t*cos(2*ω + 2*ω_r) + 12*c_r*c_t**3*t_r*t_t**2*cos(2*ω_r) + 36*c_r*c_t**3*t_r*t_t**2*cos(2*ω + 2*ω_r) - 7*c_r*c_t**3*t_r*cos(2*ω_r) - 21*c_r*c_t**3*t_r*cos(2*ω + 2*ω_r) + 4*c_r*c_t**3*t_t**3*cos(2*ω_r) + 12*c_r*c_t**3*t_t**3*cos(2*ω + 2*ω_r) - 21*c_r*c_t**3*t_t*cos(2*ω_r) - 63*c_r*c_t**3*t_t*cos(2*ω + 2*ω_r) - 16*c_t**4*t_t**3*cos(2*ω + 2*ω_r) + 28*c_t**4*t_t*cos(2*ω + 2*ω_r)))/ω**5)/3840, (ω > -oo) & (ω < oo) & Ne(ω, 0)), (b/2*p*(32*b/2**2*c_r**2*t_r + 48*b/2**2*c_r*c_t*t_r + 48*b/2**2*c_r*c_t*t_t + 192*b/2**2*c_t**2*t_t + 16*c_r**4*t_r**3*cos(ω_r)**2 - 28*c_r**4*t_r*cos(ω_r)**2 + 28*c_r**4*t_r + 4*c_r**3*c_t*t_r**3*cos(ω_r)**2 + 12*c_r**3*c_t*t_r**2*t_t*cos(ω_r)**2 - 21*c_r**3*c_t*t_r*cos(ω_r)**2 + 21*c_r**3*c_t*t_r - 7*c_r**3*c_t*t_t*cos(ω_r)**2 + 7*c_r**3*c_t*t_t + 8*c_r**2*c_t**2*t_r**2*t_t*cos(ω_r)**2 + 8*c_r**2*c_t**2*t_r*t_t**2*cos(ω_r)**2 - 14*c_r**2*c_t**2*t_r*cos(ω_r)**2 + 14*c_r**2*c_t**2*t_r - 14*c_r**2*c_t**2*t_t*cos(ω_r)**2 + 14*c_r**2*c_t**2*t_t - 320*c_r**2*t_r*y_cg**2 - 320*c_r**2*t_r*z_cg**2 + 12*c_r*c_t**3*t_r*t_t**2*cos(ω_r)**2 - 7*c_r*c_t**3*t_r*cos(ω_r)**2 + 7*c_r*c_t**3*t_r + 4*c_r*c_t**3*t_t**3*cos(ω_r)**2 - 21*c_r*c_t**3*t_t*cos(ω_r)**2 + 21*c_r*c_t**3*t_t - 160*c_r*c_t*t_r*y_cg**2 - 160*c_r*c_t*t_r*z_cg**2 - 160*c_r*c_t*t_t*y_cg**2 - 160*c_r*c_t*t_t*z_cg**2 + 16*c_t**4*t_t**3*cos(ω_r)**2 - 28*c_t**4*t_t*cos(ω_r)**2 + 28*c_t**4*t_t - 320*c_t**2*t_t*y_cg**2 - 320*c_t**2*t_t*z_cg**2)/960, True)) 

# Iyy_new = b/2*p*(32*b/2**2*c_r**2*t_r*tan(Λ_r)**2 + 48*b/2**2*c_r*c_t*t_r*tan(Λ_r)**2 + 48*b/2**2*c_r*c_t*t_t*tan(Λ_r)**2 + 192*b/2**2*c_t**2*t_t*tan(Λ_r)**2 + 24*b/2*c_r**3*t_r*tan(Λ_r) + 32*b/2*c_r**2*c_t*t_r*tan(Λ_r) + 16*b/2*c_r**2*c_t*t_t*tan(Λ_r) + 24*b/2*c_r*c_t**2*t_r*tan(Λ_r) + 48*b/2*c_r*c_t**2*t_t*tan(Λ_r) + 96*b/2*c_t**3*t_t*tan(Λ_r) + 16*c_r**4*t_r**3 + 28*c_r**4*t_r + 4*c_r**3*c_t*t_r**3 + 12*c_r**3*c_t*t_r**2*t_t + 21*c_r**3*c_t*t_r + 7*c_r**3*c_t*t_t + 8*c_r**2*c_t**2*t_r**2*t_t + 8*c_r**2*c_t**2*t_r*t_t**2 + 14*c_r**2*c_t**2*t_r + 14*c_r**2*c_t**2*t_t - 320*c_r**2*t_r*x_cg**2 - 320*c_r**2*t_r*z_cg**2 + 12*c_r*c_t**3*t_r*t_t**2 + 7*c_r*c_t**3*t_r + 4*c_r*c_t**3*t_t**3 + 21*c_r*c_t**3*t_t - 160*c_r*c_t*t_r*x_cg**2 - 160*c_r*c_t*t_r*z_cg**2 - 160*c_r*c_t*t_t*x_cg**2 - 160*c_r*c_t*t_t*z_cg**2 + 16*c_t**4*t_t**3 + 28*c_t**4*t_t - 320*c_t**2*t_t*x_cg**2 - 320*c_t**2*t_t*z_cg**2)/960 

# Izz_new = Piecewise((b/2*p*(128*b/2**2*c_r**2*t_r*tan(Λ_r)**2 + 192*b/2**2*c_r*c_t*t_r*tan(Λ_r)**2 + 192*b/2**2*c_r*c_t*t_t*tan(Λ_r)**2 + 768*b/2**2*c_t**2*t_t*tan(Λ_r)**2 + 96*b/2*c_r**3*t_r*tan(Λ_r) + 128*b/2*c_r**2*c_t*t_r*tan(Λ_r) + 64*b/2*c_r**2*c_t*t_t*tan(Λ_r) + 96*b/2*c_r*c_t**2*t_r*tan(Λ_r) + 192*b/2*c_r*c_t**2*t_t*tan(Λ_r) + 384*b/2*c_t**3*t_t*tan(Λ_r) - 1280*c_r**2*t_r*x_cg**2 - 1280*c_r**2*t_r*y_cg**2 - 640*c_r*c_t*t_r*x_cg**2 - 640*c_r*c_t*t_r*y_cg**2 - 640*c_r*c_t*t_t*x_cg**2 - 640*c_r*c_t*t_t*y_cg**2 - 1280*c_t**2*t_t*x_cg**2 - 1280*c_t**2*t_t*y_cg**2 + (120*c_r**4*t_r**3*sin(2*ω_r) - 120*c_r**4*t_r**3*sin(2*ω + 2*ω_r) - 210*c_r**4*t_r*sin(2*ω_r) + 210*c_r**4*t_r*sin(2*ω + 2*ω_r) - 120*c_r**3*c_t*t_r**3*sin(2*ω_r) + 120*c_r**3*c_t*t_r**3*sin(2*ω + 2*ω_r) - 360*c_r**3*c_t*t_r**2*t_t*sin(2*ω_r) + 360*c_r**3*c_t*t_r**2*t_t*sin(2*ω + 2*ω_r) + 630*c_r**3*c_t*t_r*sin(2*ω_r) - 630*c_r**3*c_t*t_r*sin(2*ω + 2*ω_r) + 210*c_r**3*c_t*t_t*sin(2*ω_r) - 210*c_r**3*c_t*t_t*sin(2*ω + 2*ω_r) + 360*c_r**2*c_t**2*t_r**2*t_t*sin(2*ω_r) - 360*c_r**2*c_t**2*t_r**2*t_t*sin(2*ω + 2*ω_r) + 360*c_r**2*c_t**2*t_r*t_t**2*sin(2*ω_r) - 360*c_r**2*c_t**2*t_r*t_t**2*sin(2*ω + 2*ω_r) - 630*c_r**2*c_t**2*t_r*sin(2*ω_r) + 630*c_r**2*c_t**2*t_r*sin(2*ω + 2*ω_r) - 630*c_r**2*c_t**2*t_t*sin(2*ω_r) + 630*c_r**2*c_t**2*t_t*sin(2*ω + 2*ω_r) - 360*c_r*c_t**3*t_r*t_t**2*sin(2*ω_r) + 360*c_r*c_t**3*t_r*t_t**2*sin(2*ω + 2*ω_r) + 210*c_r*c_t**3*t_r*sin(2*ω_r) - 210*c_r*c_t**3*t_r*sin(2*ω + 2*ω_r) - 120*c_r*c_t**3*t_t**3*sin(2*ω_r) + 120*c_r*c_t**3*t_t**3*sin(2*ω + 2*ω_r) + 630*c_r*c_t**3*t_t*sin(2*ω_r) - 630*c_r*c_t**3*t_t*sin(2*ω + 2*ω_r) + 120*c_t**4*t_t**3*sin(2*ω_r) - 120*c_t**4*t_t**3*sin(2*ω + 2*ω_r) - 210*c_t**4*t_t*sin(2*ω_r) + 210*c_t**4*t_t*sin(2*ω + 2*ω_r) + 2*ω**5*(64*b/2**2*c_r**2*t_r + 96*b/2**2*c_r*c_t*t_r + 96*b/2**2*c_r*c_t*t_t + 384*b/2**2*c_t**2*t_t + 16*c_r**4*t_r**3 + 28*c_r**4*t_r + 4*c_r**3*c_t*t_r**3 + 12*c_r**3*c_t*t_r**2*t_t + 21*c_r**3*c_t*t_r + 7*c_r**3*c_t*t_t + 8*c_r**2*c_t**2*t_r**2*t_t + 8*c_r**2*c_t**2*t_r*t_t**2 + 14*c_r**2*c_t**2*t_r + 14*c_r**2*c_t**2*t_t + 12*c_r*c_t**3*t_r*t_t**2 + 7*c_r*c_t**3*t_r + 4*c_r*c_t**3*t_t**3 + 21*c_r*c_t**3*t_t + 16*c_t**4*t_t**3 + 28*c_t**4*t_t) + 20*ω**4*(4*c_r**4*t_r**3*sin(2*ω_r) - 7*c_r**4*t_r*sin(2*ω_r) - 4*c_t**4*t_t**3*sin(2*ω + 2*ω_r) + 7*c_t**4*t_t*sin(2*ω + 2*ω_r)) + 10*ω**3*(-16*c_r**4*t_r**3*cos(2*ω_r) + 28*c_r**4*t_r*cos(2*ω_r) + 4*c_r**3*c_t*t_r**3*cos(2*ω_r) + 12*c_r**3*c_t*t_r**2*t_t*cos(2*ω_r) - 21*c_r**3*c_t*t_r*cos(2*ω_r) - 7*c_r**3*c_t*t_t*cos(2*ω_r) + 12*c_r*c_t**3*t_r*t_t**2*cos(2*ω + 2*ω_r) - 7*c_r*c_t**3*t_r*cos(2*ω + 2*ω_r) + 4*c_r*c_t**3*t_t**3*cos(2*ω + 2*ω_r) - 21*c_r*c_t**3*t_t*cos(2*ω + 2*ω_r) - 16*c_t**4*t_t**3*cos(2*ω + 2*ω_r) + 28*c_t**4*t_t*cos(2*ω + 2*ω_r)) + 30*ω**2*(-8*c_r**4*t_r**3*sin(2*ω_r) + 14*c_r**4*t_r*sin(2*ω_r) + 4*c_r**3*c_t*t_r**3*sin(2*ω_r) + 12*c_r**3*c_t*t_r**2*t_t*sin(2*ω_r) - 21*c_r**3*c_t*t_r*sin(2*ω_r) - 7*c_r**3*c_t*t_t*sin(2*ω_r) - 4*c_r**2*c_t**2*t_r**2*t_t*sin(2*ω_r) + 4*c_r**2*c_t**2*t_r**2*t_t*sin(2*ω + 2*ω_r) - 4*c_r**2*c_t**2*t_r*t_t**2*sin(2*ω_r) + 4*c_r**2*c_t**2*t_r*t_t**2*sin(2*ω + 2*ω_r) + 7*c_r**2*c_t**2*t_r*sin(2*ω_r) - 7*c_r**2*c_t**2*t_r*sin(2*ω + 2*ω_r) + 7*c_r**2*c_t**2*t_t*sin(2*ω_r) - 7*c_r**2*c_t**2*t_t*sin(2*ω + 2*ω_r) - 12*c_r*c_t**3*t_r*t_t**2*sin(2*ω + 2*ω_r) + 7*c_r*c_t**3*t_r*sin(2*ω + 2*ω_r) - 4*c_r*c_t**3*t_t**3*sin(2*ω + 2*ω_r) + 21*c_r*c_t**3*t_t*sin(2*ω + 2*ω_r) + 8*c_t**4*t_t**3*sin(2*ω + 2*ω_r) - 14*c_t**4*t_t*sin(2*ω + 2*ω_r)) + 15*ω*(16*c_r**4*t_r**3*cos(2*ω_r) - 28*c_r**4*t_r*cos(2*ω_r) - 12*c_r**3*c_t*t_r**3*cos(2*ω_r) - 4*c_r**3*c_t*t_r**3*cos(2*ω + 2*ω_r) - 36*c_r**3*c_t*t_r**2*t_t*cos(2*ω_r) - 12*c_r**3*c_t*t_r**2*t_t*cos(2*ω + 2*ω_r) + 63*c_r**3*c_t*t_r*cos(2*ω_r) + 21*c_r**3*c_t*t_r*cos(2*ω + 2*ω_r) + 21*c_r**3*c_t*t_t*cos(2*ω_r) + 7*c_r**3*c_t*t_t*cos(2*ω + 2*ω_r) + 24*c_r**2*c_t**2*t_r**2*t_t*cos(2*ω_r) + 24*c_r**2*c_t**2*t_r**2*t_t*cos(2*ω + 2*ω_r) + 24*c_r**2*c_t**2*t_r*t_t**2*cos(2*ω_r) + 24*c_r**2*c_t**2*t_r*t_t**2*cos(2*ω + 2*ω_r) - 42*c_r**2*c_t**2*t_r*cos(2*ω_r) - 42*c_r**2*c_t**2*t_r*cos(2*ω + 2*ω_r) - 42*c_r**2*c_t**2*t_t*cos(2*ω_r) - 42*c_r**2*c_t**2*t_t*cos(2*ω + 2*ω_r) - 12*c_r*c_t**3*t_r*t_t**2*cos(2*ω_r) - 36*c_r*c_t**3*t_r*t_t**2*cos(2*ω + 2*ω_r) + 7*c_r*c_t**3*t_r*cos(2*ω_r) + 21*c_r*c_t**3*t_r*cos(2*ω + 2*ω_r) - 4*c_r*c_t**3*t_t**3*cos(2*ω_r) - 12*c_r*c_t**3*t_t**3*cos(2*ω + 2*ω_r) + 21*c_r*c_t**3*t_t*cos(2*ω_r) + 63*c_r*c_t**3*t_t*cos(2*ω + 2*ω_r) + 16*c_t**4*t_t**3*cos(2*ω + 2*ω_r) - 28*c_t**4*t_t*cos(2*ω + 2*ω_r)))/ω**5)/3840, (ω > -oo) & (ω < oo) & Ne(ω, 0)), (b/2*p*(32*b/2**2*c_r**2*t_r/cos(Λ_r)**2 + 48*b/2**2*c_r*c_t*t_r/cos(Λ_r)**2 + 48*b/2**2*c_r*c_t*t_t/cos(Λ_r)**2 + 192*b/2**2*c_t**2*t_t/cos(Λ_r)**2 + 24*b/2*c_r**3*t_r*tan(Λ_r) + 32*b/2*c_r**2*c_t*t_r*tan(Λ_r) + 16*b/2*c_r**2*c_t*t_t*tan(Λ_r) + 24*b/2*c_r*c_t**2*t_r*tan(Λ_r) + 48*b/2*c_r*c_t**2*t_t*tan(Λ_r) + 96*b/2*c_t**3*t_t*tan(Λ_r) + 16*c_r**4*t_r**3*sin(ω_r)**2 - 28*c_r**4*t_r*sin(ω_r)**2 + 28*c_r**4*t_r + 4*c_r**3*c_t*t_r**3*sin(ω_r)**2 + 12*c_r**3*c_t*t_r**2*t_t*sin(ω_r)**2 - 21*c_r**3*c_t*t_r*sin(ω_r)**2 + 21*c_r**3*c_t*t_r - 7*c_r**3*c_t*t_t*sin(ω_r)**2 + 7*c_r**3*c_t*t_t + 8*c_r**2*c_t**2*t_r**2*t_t*sin(ω_r)**2 + 8*c_r**2*c_t**2*t_r*t_t**2*sin(ω_r)**2 - 14*c_r**2*c_t**2*t_r*sin(ω_r)**2 + 14*c_r**2*c_t**2*t_r - 14*c_r**2*c_t**2*t_t*sin(ω_r)**2 + 14*c_r**2*c_t**2*t_t - 320*c_r**2*t_r*x_cg**2 - 320*c_r**2*t_r*y_cg**2 + 12*c_r*c_t**3*t_r*t_t**2*sin(ω_r)**2 - 7*c_r*c_t**3*t_r*sin(ω_r)**2 + 7*c_r*c_t**3*t_r + 4*c_r*c_t**3*t_t**3*sin(ω_r)**2 - 21*c_r*c_t**3*t_t*sin(ω_r)**2 + 21*c_r*c_t**3*t_t - 160*c_r*c_t*t_r*x_cg**2 - 160*c_r*c_t*t_r*y_cg**2 - 160*c_r*c_t*t_t*x_cg**2 - 160*c_r*c_t*t_t*y_cg**2 + 16*c_t**4*t_t**3*sin(ω_r)**2 - 28*c_t**4*t_t*sin(ω_r)**2 + 28*c_t**4*t_t - 320*c_t**2*t_t*x_cg**2 - 320*c_t**2*t_t*y_cg**2)/960, True)) 

# Ixy_new = Piecewise((b/2*p*(-2*b/2**2*c_r**2*t_r*tan(Λ_r) - 3*b/2**2*c_r*c_t*t_r*tan(Λ_r) - 3*b/2**2*c_r*c_t*t_t*tan(Λ_r) - 12*b/2**2*c_t**2*t_t*tan(Λ_r) + 15*b/2*(24*c_r**3*t_r*sin(ω_r) - 24*c_r**3*t_r*sin(ω + ω_r) - 48*c_r**2*c_t*t_r*sin(ω_r) + 48*c_r**2*c_t*t_r*sin(ω + ω_r) - 24*c_r**2*c_t*t_t*sin(ω_r) + 24*c_r**2*c_t*t_t*sin(ω + ω_r) + 24*c_r*c_t**2*t_r*sin(ω_r) - 24*c_r*c_t**2*t_r*sin(ω + ω_r) + 48*c_r*c_t**2*t_t*sin(ω_r) - 48*c_r*c_t**2*t_t*sin(ω + ω_r) + c_t**3*t_t*ω**4*sin(ω + ω_r) - 24*c_t**3*t_t*sin(ω_r) + 24*c_t**3*t_t*sin(ω + ω_r) + ω**3*(-c_r**3*t_r*cos(ω_r) - c_r*c_t**2*t_r*cos(ω + ω_r) - 2*c_r*c_t**2*t_t*cos(ω + ω_r) + 4*c_t**3*t_t*cos(ω + ω_r)) + 2*ω**2*(-3*c_r**3*t_r*sin(ω_r) + 2*c_r**2*c_t*t_r*sin(ω_r) - 2*c_r**2*c_t*t_r*sin(ω + ω_r) + c_r**2*c_t*t_t*sin(ω_r) - c_r**2*c_t*t_t*sin(ω + ω_r) + 3*c_r*c_t**2*t_r*sin(ω + ω_r) + 6*c_r*c_t**2*t_t*sin(ω + ω_r) - 6*c_t**3*t_t*sin(ω + ω_r)) + 6*ω*(3*c_r**3*t_r*cos(ω_r) + c_r**3*t_r*cos(ω + ω_r) - 4*c_r**2*c_t*t_r*cos(ω_r) - 4*c_r**2*c_t*t_r*cos(ω + ω_r) - 2*c_r**2*c_t*t_t*cos(ω_r) - 2*c_r**2*c_t*t_t*cos(ω + ω_r) + c_r*c_t**2*t_r*cos(ω_r) + 3*c_r*c_t**2*t_r*cos(ω + ω_r) + 2*c_r*c_t**2*t_t*cos(ω_r) + 6*c_r*c_t**2*t_t*cos(ω + ω_r) - 4*c_t**3*t_t*cos(ω + ω_r)))/ω**5 - 20*c_r**2*t_r*x_cg*y_cg - 10*c_r*c_t*t_r*x_cg*y_cg - 10*c_r*c_t*t_t*x_cg*y_cg - 20*c_t**2*t_t*x_cg*y_cg)/60, (ω > -oo) & (ω < oo) & Ne(ω, 0)), (b/2*p*(-8*b/2**2*c_r**2*t_r*tan(Λ_r) - 12*b/2**2*c_r*c_t*t_r*tan(Λ_r) - 12*b/2**2*c_r*c_t*t_t*tan(Λ_r) - 48*b/2**2*c_t**2*t_t*tan(Λ_r) + b/2*(3*c_r**3*t_r + 4*c_r**2*c_t*t_r + 2*c_r**2*c_t*t_t + 3*c_r*c_t**2*t_r + 6*c_r*c_t**2*t_t + 12*c_t**3*t_t)*cos(ω_r) - 80*c_r**2*t_r*x_cg*y_cg - 40*c_r*c_t*t_r*x_cg*y_cg - 40*c_r*c_t*t_t*x_cg*y_cg - 80*c_t**2*t_t*x_cg*y_cg)/240, True)) 

# Ixz_new = Piecewise((b/2*p*(-256*c_r**2*t_r*x_cg*z_cg - 128*c_r*c_t*t_r*x_cg*z_cg - 128*c_r*c_t*t_t*x_cg*z_cg - 256*c_t**2*t_t*x_cg*z_cg + (48*c_r**4*t_r**3*sin(ω_r)**2 - 48*c_r**4*t_r**3*sin(ω + ω_r)**2 - 84*c_r**4*t_r*sin(ω_r)**2 + 84*c_r**4*t_r*sin(ω + ω_r)**2 - 48*c_r**3*c_t*t_r**3*sin(ω_r)**2 + 48*c_r**3*c_t*t_r**3*sin(ω + ω_r)**2 - 144*c_r**3*c_t*t_r**2*t_t*sin(ω_r)**2 + 144*c_r**3*c_t*t_r**2*t_t*sin(ω + ω_r)**2 + 252*c_r**3*c_t*t_r*sin(ω_r)**2 - 252*c_r**3*c_t*t_r*sin(ω + ω_r)**2 + 84*c_r**3*c_t*t_t*sin(ω_r)**2 - 84*c_r**3*c_t*t_t*sin(ω + ω_r)**2 + 144*c_r**2*c_t**2*t_r**2*t_t*sin(ω_r)**2 - 144*c_r**2*c_t**2*t_r**2*t_t*sin(ω + ω_r)**2 + 144*c_r**2*c_t**2*t_r*t_t**2*sin(ω_r)**2 - 144*c_r**2*c_t**2*t_r*t_t**2*sin(ω + ω_r)**2 - 252*c_r**2*c_t**2*t_r*sin(ω_r)**2 + 252*c_r**2*c_t**2*t_r*sin(ω + ω_r)**2 - 252*c_r**2*c_t**2*t_t*sin(ω_r)**2 + 252*c_r**2*c_t**2*t_t*sin(ω + ω_r)**2 - 144*c_r*c_t**3*t_r*t_t**2*sin(ω_r)**2 + 144*c_r*c_t**3*t_r*t_t**2*sin(ω + ω_r)**2 + 84*c_r*c_t**3*t_r*sin(ω_r)**2 - 84*c_r*c_t**3*t_r*sin(ω + ω_r)**2 - 48*c_r*c_t**3*t_t**3*sin(ω_r)**2 + 48*c_r*c_t**3*t_t**3*sin(ω + ω_r)**2 + 252*c_r*c_t**3*t_t*sin(ω_r)**2 - 252*c_r*c_t**3*t_t*sin(ω + ω_r)**2 + 48*c_t**4*t_t**3*sin(ω_r)**2 - 48*c_t**4*t_t**3*sin(ω + ω_r)**2 - 84*c_t**4*t_t*sin(ω_r)**2 + 84*c_t**4*t_t*sin(ω + ω_r)**2 + 4*ω**4*(8*c_r**4*t_r**3*sin(ω_r)**2 - 4*c_r**4*t_r**3*sin(ω + ω_r)**2 - 4*c_r**4*t_r**3*cos(ω + ω_r)**2 - 14*c_r**4*t_r*sin(ω_r)**2 + 7*c_r**4*t_r*sin(ω + ω_r)**2 + 7*c_r**4*t_r*cos(ω + ω_r)**2 - 4*c_t**4*t_t**3*sin(ω + ω_r)**2 + 4*c_t**4*t_t**3*cos(ω + ω_r)**2 + 7*c_t**4*t_t*sin(ω + ω_r)**2 - 7*c_t**4*t_t*cos(ω + ω_r)**2) + 2*ω**3*(-16*c_r**4*t_r**3*sin(2*ω_r) + 28*c_r**4*t_r*sin(2*ω_r) + 4*c_r**3*c_t*t_r**3*sin(2*ω_r) + 12*c_r**3*c_t*t_r**2*t_t*sin(2*ω_r) - 21*c_r**3*c_t*t_r*sin(2*ω_r) - 7*c_r**3*c_t*t_t*sin(2*ω_r) + 12*c_r*c_t**3*t_r*t_t**2*sin(2*ω + 2*ω_r) - 7*c_r*c_t**3*t_r*sin(2*ω + 2*ω_r) + 4*c_r*c_t**3*t_t**3*sin(2*ω + 2*ω_r) - 21*c_r*c_t**3*t_t*sin(2*ω + 2*ω_r) - 16*c_t**4*t_t**3*sin(2*ω + 2*ω_r) + 28*c_t**4*t_t*sin(2*ω + 2*ω_r)) + 6*ω**2*(-16*c_r**4*t_r**3*sin(ω_r)**2 + 8*c_r**4*t_r**3*sin(ω + ω_r)**2 + 8*c_r**4*t_r**3*cos(ω + ω_r)**2 + 28*c_r**4*t_r*sin(ω_r)**2 - 14*c_r**4*t_r*sin(ω + ω_r)**2 - 14*c_r**4*t_r*cos(ω + ω_r)**2 + 8*c_r**3*c_t*t_r**3*sin(ω_r)**2 - 4*c_r**3*c_t*t_r**3*sin(ω + ω_r)**2 - 4*c_r**3*c_t*t_r**3*cos(ω + ω_r)**2 + 24*c_r**3*c_t*t_r**2*t_t*sin(ω_r)**2 - 12*c_r**3*c_t*t_r**2*t_t*sin(ω + ω_r)**2 - 12*c_r**3*c_t*t_r**2*t_t*cos(ω + ω_r)**2 - 42*c_r**3*c_t*t_r*sin(ω_r)**2 + 21*c_r**3*c_t*t_r*sin(ω + ω_r)**2 + 21*c_r**3*c_t*t_r*cos(ω + ω_r)**2 - 14*c_r**3*c_t*t_t*sin(ω_r)**2 + 7*c_r**3*c_t*t_t*sin(ω + ω_r)**2 + 7*c_r**3*c_t*t_t*cos(ω + ω_r)**2 - 8*c_r**2*c_t**2*t_r**2*t_t*sin(ω_r)**2 + 8*c_r**2*c_t**2*t_r**2*t_t*sin(ω + ω_r)**2 - 8*c_r**2*c_t**2*t_r*t_t**2*sin(ω_r)**2 + 8*c_r**2*c_t**2*t_r*t_t**2*sin(ω + ω_r)**2 + 14*c_r**2*c_t**2*t_r*sin(ω_r)**2 - 14*c_r**2*c_t**2*t_r*sin(ω + ω_r)**2 + 14*c_r**2*c_t**2*t_t*sin(ω_r)**2 - 14*c_r**2*c_t**2*t_t*sin(ω + ω_r)**2 - 12*c_r*c_t**3*t_r*t_t**2*sin(ω + ω_r)**2 + 12*c_r*c_t**3*t_r*t_t**2*cos(ω + ω_r)**2 + 7*c_r*c_t**3*t_r*sin(ω + ω_r)**2 - 7*c_r*c_t**3*t_r*cos(ω + ω_r)**2 - 4*c_r*c_t**3*t_t**3*sin(ω + ω_r)**2 + 4*c_r*c_t**3*t_t**3*cos(ω + ω_r)**2 + 21*c_r*c_t**3*t_t*sin(ω + ω_r)**2 - 21*c_r*c_t**3*t_t*cos(ω + ω_r)**2 + 8*c_t**4*t_t**3*sin(ω + ω_r)**2 - 8*c_t**4*t_t**3*cos(ω + ω_r)**2 - 14*c_t**4*t_t*sin(ω + ω_r)**2 + 14*c_t**4*t_t*cos(ω + ω_r)**2) + 3*ω*(16*c_r**4*t_r**3*sin(2*ω_r) - 28*c_r**4*t_r*sin(2*ω_r) - 12*c_r**3*c_t*t_r**3*sin(2*ω_r) - 4*c_r**3*c_t*t_r**3*sin(2*ω + 2*ω_r) - 36*c_r**3*c_t*t_r**2*t_t*sin(2*ω_r) - 12*c_r**3*c_t*t_r**2*t_t*sin(2*ω + 2*ω_r) + 63*c_r**3*c_t*t_r*sin(2*ω_r) + 21*c_r**3*c_t*t_r*sin(2*ω + 2*ω_r) + 21*c_r**3*c_t*t_t*sin(2*ω_r) + 7*c_r**3*c_t*t_t*sin(2*ω + 2*ω_r) + 24*c_r**2*c_t**2*t_r**2*t_t*sin(2*ω_r) + 24*c_r**2*c_t**2*t_r**2*t_t*sin(2*ω + 2*ω_r) + 24*c_r**2*c_t**2*t_r*t_t**2*sin(2*ω_r) + 24*c_r**2*c_t**2*t_r*t_t**2*sin(2*ω + 2*ω_r) - 42*c_r**2*c_t**2*t_r*sin(2*ω_r) - 42*c_r**2*c_t**2*t_r*sin(2*ω + 2*ω_r) - 42*c_r**2*c_t**2*t_t*sin(2*ω_r) - 42*c_r**2*c_t**2*t_t*sin(2*ω + 2*ω_r) - 12*c_r*c_t**3*t_r*t_t**2*sin(2*ω_r) - 36*c_r*c_t**3*t_r*t_t**2*sin(2*ω + 2*ω_r) + 7*c_r*c_t**3*t_r*sin(2*ω_r) + 21*c_r*c_t**3*t_r*sin(2*ω + 2*ω_r) - 4*c_r*c_t**3*t_t**3*sin(2*ω_r) - 12*c_r*c_t**3*t_t**3*sin(2*ω + 2*ω_r) + 21*c_r*c_t**3*t_t*sin(2*ω_r) + 63*c_r*c_t**3*t_t*sin(2*ω + 2*ω_r) + 16*c_t**4*t_t**3*sin(2*ω + 2*ω_r) - 28*c_t**4*t_t*sin(2*ω + 2*ω_r)))/ω**5)/768, (ω > -oo) & (ω < oo) & Ne(ω, 0)), (b/2*p*(-640*c_r**2*t_r*x_cg*z_cg - 320*c_r*c_t*t_r*x_cg*z_cg - 320*c_r*c_t*t_t*x_cg*z_cg - 640*c_t**2*t_t*x_cg*z_cg + (-16*c_r**4*t_r**3 + 28*c_r**4*t_r - 4*c_r**3*c_t*t_r**3 - 12*c_r**3*c_t*t_r**2*t_t + 21*c_r**3*c_t*t_r + 7*c_r**3*c_t*t_t - 8*c_r**2*c_t**2*t_r**2*t_t - 8*c_r**2*c_t**2*t_r*t_t**2 + 14*c_r**2*c_t**2*t_r + 14*c_r**2*c_t**2*t_t - 12*c_r*c_t**3*t_r*t_t**2 + 7*c_r*c_t**3*t_r - 4*c_r*c_t**3*t_t**3 + 21*c_r*c_t**3*t_t - 16*c_t**4*t_t**3 + 28*c_t**4*t_t)*sin(2*ω_r))/1920, True)) 

# Iyz_new = Piecewise((b/2*p*(3*b/2*(24*c_r**3*t_r*cos(ω_r) - 24*c_r**3*t_r*cos(ω + ω_r) - 48*c_r**2*c_t*t_r*cos(ω_r) + 48*c_r**2*c_t*t_r*cos(ω + ω_r) - 24*c_r**2*c_t*t_t*cos(ω_r) + 24*c_r**2*c_t*t_t*cos(ω + ω_r) + 24*c_r*c_t**2*t_r*cos(ω_r) - 24*c_r*c_t**2*t_r*cos(ω + ω_r) + 48*c_r*c_t**2*t_t*cos(ω_r) - 48*c_r*c_t**2*t_t*cos(ω + ω_r) + c_t**3*t_t*ω**4*cos(ω + ω_r) - 24*c_t**3*t_t*cos(ω_r) + 24*c_t**3*t_t*cos(ω + ω_r) + ω**3*(c_r**3*t_r*sin(ω_r) + c_r*c_t**2*t_r*sin(ω + ω_r) + 2*c_r*c_t**2*t_t*sin(ω + ω_r) - 4*c_t**3*t_t*sin(ω + ω_r)) + 2*ω**2*(-3*c_r**3*t_r*cos(ω_r) + 2*c_r**2*c_t*t_r*cos(ω_r) - 2*c_r**2*c_t*t_r*cos(ω + ω_r) + c_r**2*c_t*t_t*cos(ω_r) - c_r**2*c_t*t_t*cos(ω + ω_r) + 3*c_r*c_t**2*t_r*cos(ω + ω_r) + 6*c_r*c_t**2*t_t*cos(ω + ω_r) - 6*c_t**3*t_t*cos(ω + ω_r)) + 6*ω*(-3*c_r**3*t_r*sin(ω_r) - c_r**3*t_r*sin(ω + ω_r) + 4*c_r**2*c_t*t_r*sin(ω_r) + 4*c_r**2*c_t*t_r*sin(ω + ω_r) + 2*c_r**2*c_t*t_t*sin(ω_r) + 2*c_r**2*c_t*t_t*sin(ω + ω_r) - c_r*c_t**2*t_r*sin(ω_r) - 3*c_r*c_t**2*t_r*sin(ω + ω_r) - 2*c_r*c_t**2*t_t*sin(ω_r) - 6*c_r*c_t**2*t_t*sin(ω + ω_r) + 4*c_t**3*t_t*sin(ω + ω_r)))/ω**5 - 4*c_r**2*t_r*y_cg*z_cg - 2*c_r*c_t*t_r*y_cg*z_cg - 2*c_r*c_t*t_t*y_cg*z_cg - 4*c_t**2*t_t*y_cg*z_cg)/12, (ω > -oo) & (ω < oo) & Ne(ω, 0)), (-b/2*p*(b/2*(3*c_r**3*t_r + 4*c_r**2*c_t*t_r + 2*c_r**2*c_t*t_t + 3*c_r*c_t**2*t_r + 6*c_r*c_t**2*t_t + 12*c_t**3*t_t)*sin(ω_r) + 80*c_r**2*t_r*y_cg*z_cg + 40*c_r*c_t*t_r*y_cg*z_cg + 40*c_r*c_t*t_t*y_cg*z_cg + 80*c_t**2*t_t*y_cg*z_cg)/240, True)) 